
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003650  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00003650  000036e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008000f6  008000f6  0000377a  2**0
                  ALLOC
  3 .stab         00002cd0  00000000  00000000  0000377c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001129  00000000  00000000  0000644c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007575  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000076b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007825  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000946e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a359  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b108  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b268  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b4f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bcc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 6d 18 	jmp	0x30da	; 0x30da <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	f6 e3       	ldi	r31, 0x36	; 54
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 30       	cpi	r26, 0x06	; 6
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 26 1b 	jmp	0x364c	; 0x364c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ee       	ldi	r26, 0xE0	; 224
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ee       	ldi	r24, 0xE0	; 224
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c6 1a 	jmp	0x358c	; 0x358c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b6 1a 	jmp	0x356c	; 0x356c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d2 1a 	jmp	0x35a4	; 0x35a4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ba 1a 	jmp	0x3574	; 0x3574 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d6 1a 	jmp	0x35ac	; 0x35ac <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
uint8 i;
/*******************************************************************************
 *                           Main Function                                     *
 *******************************************************************************/
int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2c 97       	sbiw	r28, 0x0c	; 12
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType uartConfig = { 19200 , EVEN , ONE_BIT, EIGHT_BIT }; /* UART configurations  19200 baud rate */
     b5a:	ce 01       	movw	r24, r28
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	99 87       	std	Y+9, r25	; 0x09
     b60:	88 87       	std	Y+8, r24	; 0x08
     b62:	e8 ee       	ldi	r30, 0xE8	; 232
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	fb 87       	std	Y+11, r31	; 0x0b
     b68:	ea 87       	std	Y+10, r30	; 0x0a
     b6a:	f7 e0       	ldi	r31, 0x07	; 7
     b6c:	fc 87       	std	Y+12, r31	; 0x0c
     b6e:	ea 85       	ldd	r30, Y+10	; 0x0a
     b70:	fb 85       	ldd	r31, Y+11	; 0x0b
     b72:	00 80       	ld	r0, Z
     b74:	8a 85       	ldd	r24, Y+10	; 0x0a
     b76:	9b 85       	ldd	r25, Y+11	; 0x0b
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	9b 87       	std	Y+11, r25	; 0x0b
     b7c:	8a 87       	std	Y+10, r24	; 0x0a
     b7e:	e8 85       	ldd	r30, Y+8	; 0x08
     b80:	f9 85       	ldd	r31, Y+9	; 0x09
     b82:	00 82       	st	Z, r0
     b84:	88 85       	ldd	r24, Y+8	; 0x08
     b86:	99 85       	ldd	r25, Y+9	; 0x09
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	99 87       	std	Y+9, r25	; 0x09
     b8c:	88 87       	std	Y+8, r24	; 0x08
     b8e:	9c 85       	ldd	r25, Y+12	; 0x0c
     b90:	91 50       	subi	r25, 0x01	; 1
     b92:	9c 87       	std	Y+12, r25	; 0x0c
     b94:	ec 85       	ldd	r30, Y+12	; 0x0c
     b96:	ee 23       	and	r30, r30
     b98:	51 f7       	brne	.-44     	; 0xb6e <main+0x28>

	LCD_init(); /* initialize LCD */
     b9a:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <LCD_init>
	UART_init(&uartConfig); /* initialize UART */
     b9e:	ce 01       	movw	r24, r28
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <UART_init>
	SREG |= (1<<7); /* global interrupt enable i-bit */
     ba6:	af e5       	ldi	r26, 0x5F	; 95
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	ef e5       	ldi	r30, 0x5F	; 95
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	80 68       	ori	r24, 0x80	; 128
     bb2:	8c 93       	st	X, r24

	while(1) /* this while loop if password is wrong will keep looping until user creates a password */
	{
		HECU_PLZ_ENTER_PASS_STRING;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
     bba:	8e e0       	ldi	r24, 0x0E	; 14
     bbc:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
     bc0:	20 e6       	ldi	r18, 0x60	; 96
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	a9 01       	movw	r20, r18
     bca:	0e 94 27 18 	call	0x304e	; 0x304e <LCD_displayStringRowColumn>
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
		HECU_typePassword(HECU_password); /* will send the CONTROL ECU the first password */
     bd6:	8b ef       	ldi	r24, 0xFB	; 251
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 13 06 	call	0xc26	; 0xc26 <HECU_typePassword>
		HECU_PLZ_RE_ENTER_PASS_STRING;
     bde:	8e e0       	ldi	r24, 0x0E	; 14
     be0:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
     be4:	21 e7       	ldi	r18, 0x71	; 113
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	a9 01       	movw	r20, r18
     bee:	0e 94 27 18 	call	0x304e	; 0x304e <LCD_displayStringRowColumn>
     bf2:	22 e8       	ldi	r18, 0x82	; 130
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	a9 01       	movw	r20, r18
     bfc:	0e 94 27 18 	call	0x304e	; 0x304e <LCD_displayStringRowColumn>
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	6b e0       	ldi	r22, 0x0B	; 11
     c04:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
		HECU_typePassword(HECU_passwordConfirm); /* will send the CONTROL ECU the confirmation password */
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	0e 94 13 06 	call	0xc26	; 0xc26 <HECU_typePassword>
		HECU_checkPassword = UART_recieveByte(); /* will receive from the control ecu if password is matched or not */
     c10:	0e 94 0d 1a 	call	0x341a	; 0x341a <UART_recieveByte>
     c14:	80 93 f7 00 	sts	0x00F7, r24
		if(HECU_checkPassword == PASSWORD_MATCH )
     c18:	80 91 f7 00 	lds	r24, 0x00F7
     c1c:	80 32       	cpi	r24, 0x20	; 32
     c1e:	51 f6       	brne	.-108    	; 0xbb4 <main+0x6e>
		{
			HECU_mainOptions(); /* if password match will display the main options */
     c20:	0e 94 d6 06 	call	0xdac	; 0xdac <HECU_mainOptions>
     c24:	c7 cf       	rjmp	.-114    	; 0xbb4 <main+0x6e>

00000c26 <HECU_typePassword>:
/*
 * Description :
 * takes password from the user and sends it to another device
 */
void HECU_typePassword(uint8 *password)
{
     c26:	df 93       	push	r29
     c28:	cf 93       	push	r28
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	61 97       	sbiw	r28, 0x11	; 17
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	f8 94       	cli
     c34:	de bf       	out	0x3e, r29	; 62
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	cd bf       	out	0x3d, r28	; 61
     c3a:	99 8b       	std	Y+17, r25	; 0x11
     c3c:	88 8b       	std	Y+16, r24	; 0x10
	uint8 counter = 0; /* a variable to make sure no more than 5 digits are entered for the password */
     c3e:	1f 86       	std	Y+15, r1	; 0x0f
	while(1) /* this while loop is for password input  we will break by pressing = sign on the keypad which means we have entered the password */
	{
		HECU_keyInput = KEYPAD_getPressedKey();
     c40:	0e 94 80 0c 	call	0x1900	; 0x1900 <KEYPAD_getPressedKey>
     c44:	80 93 f8 00 	sts	0x00F8, r24
		if(HECU_keyInput <= KEYPAD_MAX_VALUE && counter < PW_SIZE ) /* this if condition will disable any input from the keypad other than 0 to 9 */
     c48:	80 91 f8 00 	lds	r24, 0x00F8
     c4c:	8a 30       	cpi	r24, 0x0A	; 10
     c4e:	08 f0       	brcs	.+2      	; 0xc52 <HECU_typePassword+0x2c>
     c50:	87 c0       	rjmp	.+270    	; 0xd60 <HECU_typePassword+0x13a>
     c52:	8f 85       	ldd	r24, Y+15	; 0x0f
     c54:	85 30       	cpi	r24, 0x05	; 5
     c56:	08 f0       	brcs	.+2      	; 0xc5a <HECU_typePassword+0x34>
     c58:	83 c0       	rjmp	.+262    	; 0xd60 <HECU_typePassword+0x13a>
		{
			LCD_displayCharacter('*'); /* will display password characters as asterisk */
     c5a:	8a e2       	ldi	r24, 0x2A	; 42
     c5c:	0e 94 41 13 	call	0x2682	; 0x2682 <LCD_displayCharacter>
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	aa ef       	ldi	r26, 0xFA	; 250
     c66:	b3 e4       	ldi	r27, 0x43	; 67
     c68:	8b 87       	std	Y+11, r24	; 0x0b
     c6a:	9c 87       	std	Y+12, r25	; 0x0c
     c6c:	ad 87       	std	Y+13, r26	; 0x0d
     c6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c70:	6b 85       	ldd	r22, Y+11	; 0x0b
     c72:	7c 85       	ldd	r23, Y+12	; 0x0c
     c74:	8d 85       	ldd	r24, Y+13	; 0x0d
     c76:	9e 85       	ldd	r25, Y+14	; 0x0e
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	4a ef       	ldi	r20, 0xFA	; 250
     c7e:	54 e4       	ldi	r21, 0x44	; 68
     c80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c84:	dc 01       	movw	r26, r24
     c86:	cb 01       	movw	r24, r22
     c88:	8f 83       	std	Y+7, r24	; 0x07
     c8a:	98 87       	std	Y+8, r25	; 0x08
     c8c:	a9 87       	std	Y+9, r26	; 0x09
     c8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c90:	6f 81       	ldd	r22, Y+7	; 0x07
     c92:	78 85       	ldd	r23, Y+8	; 0x08
     c94:	89 85       	ldd	r24, Y+9	; 0x09
     c96:	9a 85       	ldd	r25, Y+10	; 0x0a
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	40 e8       	ldi	r20, 0x80	; 128
     c9e:	5f e3       	ldi	r21, 0x3F	; 63
     ca0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ca4:	88 23       	and	r24, r24
     ca6:	2c f4       	brge	.+10     	; 0xcb2 <HECU_typePassword+0x8c>
		__ticks = 1;
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	9e 83       	std	Y+6, r25	; 0x06
     cae:	8d 83       	std	Y+5, r24	; 0x05
     cb0:	3f c0       	rjmp	.+126    	; 0xd30 <HECU_typePassword+0x10a>
	else if (__tmp > 65535)
     cb2:	6f 81       	ldd	r22, Y+7	; 0x07
     cb4:	78 85       	ldd	r23, Y+8	; 0x08
     cb6:	89 85       	ldd	r24, Y+9	; 0x09
     cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	3f ef       	ldi	r19, 0xFF	; 255
     cbe:	4f e7       	ldi	r20, 0x7F	; 127
     cc0:	57 e4       	ldi	r21, 0x47	; 71
     cc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cc6:	18 16       	cp	r1, r24
     cc8:	4c f5       	brge	.+82     	; 0xd1c <HECU_typePassword+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cca:	6b 85       	ldd	r22, Y+11	; 0x0b
     ccc:	7c 85       	ldd	r23, Y+12	; 0x0c
     cce:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	40 e2       	ldi	r20, 0x20	; 32
     cd8:	51 e4       	ldi	r21, 0x41	; 65
     cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cde:	dc 01       	movw	r26, r24
     ce0:	cb 01       	movw	r24, r22
     ce2:	bc 01       	movw	r22, r24
     ce4:	cd 01       	movw	r24, r26
     ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	9e 83       	std	Y+6, r25	; 0x06
     cf0:	8d 83       	std	Y+5, r24	; 0x05
     cf2:	0f c0       	rjmp	.+30     	; 0xd12 <HECU_typePassword+0xec>
     cf4:	88 ec       	ldi	r24, 0xC8	; 200
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	9c 83       	std	Y+4, r25	; 0x04
     cfa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	9c 81       	ldd	r25, Y+4	; 0x04
     d00:	01 97       	sbiw	r24, 0x01	; 1
     d02:	f1 f7       	brne	.-4      	; 0xd00 <HECU_typePassword+0xda>
     d04:	9c 83       	std	Y+4, r25	; 0x04
     d06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d08:	8d 81       	ldd	r24, Y+5	; 0x05
     d0a:	9e 81       	ldd	r25, Y+6	; 0x06
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	9e 83       	std	Y+6, r25	; 0x06
     d10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d12:	8d 81       	ldd	r24, Y+5	; 0x05
     d14:	9e 81       	ldd	r25, Y+6	; 0x06
     d16:	00 97       	sbiw	r24, 0x00	; 0
     d18:	69 f7       	brne	.-38     	; 0xcf4 <HECU_typePassword+0xce>
     d1a:	14 c0       	rjmp	.+40     	; 0xd44 <HECU_typePassword+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d1c:	6f 81       	ldd	r22, Y+7	; 0x07
     d1e:	78 85       	ldd	r23, Y+8	; 0x08
     d20:	89 85       	ldd	r24, Y+9	; 0x09
     d22:	9a 85       	ldd	r25, Y+10	; 0x0a
     d24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d28:	dc 01       	movw	r26, r24
     d2a:	cb 01       	movw	r24, r22
     d2c:	9e 83       	std	Y+6, r25	; 0x06
     d2e:	8d 83       	std	Y+5, r24	; 0x05
     d30:	8d 81       	ldd	r24, Y+5	; 0x05
     d32:	9e 81       	ldd	r25, Y+6	; 0x06
     d34:	9a 83       	std	Y+2, r25	; 0x02
     d36:	89 83       	std	Y+1, r24	; 0x01
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	f1 f7       	brne	.-4      	; 0xd3c <HECU_typePassword+0x116>
     d40:	9a 83       	std	Y+2, r25	; 0x02
     d42:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500); /* this delay will prevent multiple inputs from the keypad only one at a time */
			password[counter] = HECU_keyInput; /* will store the keypad input in the password array */
     d44:	8f 85       	ldd	r24, Y+15	; 0x0f
     d46:	28 2f       	mov	r18, r24
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	88 89       	ldd	r24, Y+16	; 0x10
     d4c:	99 89       	ldd	r25, Y+17	; 0x11
     d4e:	fc 01       	movw	r30, r24
     d50:	e2 0f       	add	r30, r18
     d52:	f3 1f       	adc	r31, r19
     d54:	80 91 f8 00 	lds	r24, 0x00F8
     d58:	80 83       	st	Z, r24
			counter++; /* after the keypad input is stored will increment the counter to store the next digit in the password */
     d5a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d5c:	8f 5f       	subi	r24, 0xFF	; 255
     d5e:	8f 87       	std	Y+15, r24	; 0x0f
		}
		if(HECU_keyInput == '=') /* Equal sign is used as a confirm button to send the password to the CONTROL ECU */
     d60:	80 91 f8 00 	lds	r24, 0x00F8
     d64:	8d 33       	cpi	r24, 0x3D	; 61
     d66:	09 f0       	breq	.+2      	; 0xd6a <HECU_typePassword+0x144>
     d68:	6b cf       	rjmp	.-298    	; 0xc40 <HECU_typePassword+0x1a>
		{
			for ( i = 0 ; i < PW_SIZE; i++)
     d6a:	10 92 05 01 	sts	0x0105, r1
     d6e:	11 c0       	rjmp	.+34     	; 0xd92 <HECU_typePassword+0x16c>
			{
				UART_sendByte(password[i]); /* will send the password digit by digit to the CONTROL ECU */
     d70:	80 91 05 01 	lds	r24, 0x0105
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	88 89       	ldd	r24, Y+16	; 0x10
     d7a:	99 89       	ldd	r25, Y+17	; 0x11
     d7c:	fc 01       	movw	r30, r24
     d7e:	e2 0f       	add	r30, r18
     d80:	f3 1f       	adc	r31, r19
     d82:	80 81       	ld	r24, Z
     d84:	0e 94 f6 19 	call	0x33ec	; 0x33ec <UART_sendByte>
			password[counter] = HECU_keyInput; /* will store the keypad input in the password array */
			counter++; /* after the keypad input is stored will increment the counter to store the next digit in the password */
		}
		if(HECU_keyInput == '=') /* Equal sign is used as a confirm button to send the password to the CONTROL ECU */
		{
			for ( i = 0 ; i < PW_SIZE; i++)
     d88:	80 91 05 01 	lds	r24, 0x0105
     d8c:	8f 5f       	subi	r24, 0xFF	; 255
     d8e:	80 93 05 01 	sts	0x0105, r24
     d92:	80 91 05 01 	lds	r24, 0x0105
     d96:	85 30       	cpi	r24, 0x05	; 5
     d98:	58 f3       	brcs	.-42     	; 0xd70 <HECU_typePassword+0x14a>
			}
			return; /* once the password is sent the function task is done */
		}

	}
}
     d9a:	61 96       	adiw	r28, 0x11	; 17
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <HECU_mainOptions>:
/*
 * Description :
 * will display the Main options and basically includes the whole system after creating the password.
 */
void HECU_mainOptions(void)
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	cd b7       	in	r28, 0x3d	; 61
     db2:	de b7       	in	r29, 0x3e	; 62
     db4:	e6 97       	sbiw	r28, 0x36	; 54
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
	uint8 pw_wrong = 0; /* variable to count how many pw entries are wrong */
     dc0:	1b a6       	std	Y+43, r1	; 0x2b
	TIMER1_ConfigType timer1Config = { 0 , 58594 , T1_1024, COMPARE }; /* timer1 configurations for 7.5 seconds (58594 ticks)*/
     dc2:	ce 01       	movw	r24, r28
     dc4:	8c 96       	adiw	r24, 0x2c	; 44
     dc6:	9b ab       	std	Y+51, r25	; 0x33
     dc8:	8a ab       	std	Y+50, r24	; 0x32
     dca:	ef ee       	ldi	r30, 0xEF	; 239
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	fd ab       	std	Y+53, r31	; 0x35
     dd0:	ec ab       	std	Y+52, r30	; 0x34
     dd2:	f6 e0       	ldi	r31, 0x06	; 6
     dd4:	fe ab       	std	Y+54, r31	; 0x36
     dd6:	ec a9       	ldd	r30, Y+52	; 0x34
     dd8:	fd a9       	ldd	r31, Y+53	; 0x35
     dda:	00 80       	ld	r0, Z
     ddc:	8c a9       	ldd	r24, Y+52	; 0x34
     dde:	9d a9       	ldd	r25, Y+53	; 0x35
     de0:	01 96       	adiw	r24, 0x01	; 1
     de2:	9d ab       	std	Y+53, r25	; 0x35
     de4:	8c ab       	std	Y+52, r24	; 0x34
     de6:	ea a9       	ldd	r30, Y+50	; 0x32
     de8:	fb a9       	ldd	r31, Y+51	; 0x33
     dea:	00 82       	st	Z, r0
     dec:	8a a9       	ldd	r24, Y+50	; 0x32
     dee:	9b a9       	ldd	r25, Y+51	; 0x33
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	9b ab       	std	Y+51, r25	; 0x33
     df4:	8a ab       	std	Y+50, r24	; 0x32
     df6:	9e a9       	ldd	r25, Y+54	; 0x36
     df8:	91 50       	subi	r25, 0x01	; 1
     dfa:	9e ab       	std	Y+54, r25	; 0x36
     dfc:	ee a9       	ldd	r30, Y+54	; 0x36
     dfe:	ee 23       	and	r30, r30
     e00:	51 f7       	brne	.-44     	; 0xdd6 <HECU_mainOptions+0x2a>
	 * if password is incorrect in both -> will ask the user to enter the password for 3 times if the 3 times are incorrect the HECU will freeze for 1 minute
	   and then return to main options again
	 */
	while(1)
	{
		LCD_sendCommand(LCD_CLEAR_COMMAND);
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
		LCD_displayString("+ = Open Door");
     e08:	8d e8       	ldi	r24, 0x8D	; 141
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
		LCD_displayStringRowColumn(1,0,"- = ChangePass");
     e10:	2b e9       	ldi	r18, 0x9B	; 155
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	a9 01       	movw	r20, r18
     e1a:	0e 94 27 18 	call	0x304e	; 0x304e <LCD_displayStringRowColumn>
		HECU_keyInput = KEYPAD_getPressedKey();
     e1e:	0e 94 80 0c 	call	0x1900	; 0x1900 <KEYPAD_getPressedKey>
     e22:	80 93 f8 00 	sts	0x00F8, r24
		if(HECU_keyInput == '+') /* + sign will choose the open door menu */
     e26:	80 91 f8 00 	lds	r24, 0x00F8
     e2a:	8b 32       	cpi	r24, 0x2B	; 43
     e2c:	09 f0       	breq	.+2      	; 0xe30 <HECU_mainOptions+0x84>
     e2e:	5c c1       	rjmp	.+696    	; 0x10e8 <HECU_mainOptions+0x33c>
		{
			while(1)
			{
				UART_sendByte(UNLOCK_DOOR); /* send UNLOCK DOOR definition to let the CONTROL ECU knows which option the user have chosen */
     e30:	80 e5       	ldi	r24, 0x50	; 80
     e32:	0e 94 f6 19 	call	0x33ec	; 0x33ec <UART_sendByte>
				HECU_PLZ_ENTER_PASS_STRING;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
     e3c:	8e e0       	ldi	r24, 0x0E	; 14
     e3e:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
     e42:	20 e6       	ldi	r18, 0x60	; 96
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	a9 01       	movw	r20, r18
     e4c:	0e 94 27 18 	call	0x304e	; 0x304e <LCD_displayStringRowColumn>
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
				HECU_typePassword(HECU_passwordConfirm); /* ask the user to send the password one more time */
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	0e 94 13 06 	call	0xc26	; 0xc26 <HECU_typePassword>
				HECU_checkPassword = UART_recieveByte(); /* wait for the CONTROL ECU to confirm if the password is correct from the eeprom */
     e60:	0e 94 0d 1a 	call	0x341a	; 0x341a <UART_recieveByte>
     e64:	80 93 f7 00 	sts	0x00F7, r24
				if (HECU_checkPassword == PASSWORD_MATCH)
     e68:	80 91 f7 00 	lds	r24, 0x00F7
     e6c:	80 32       	cpi	r24, 0x20	; 32
     e6e:	09 f0       	breq	.+2      	; 0xe72 <HECU_mainOptions+0xc6>
     e70:	a8 c0       	rjmp	.+336    	; 0xfc2 <HECU_mainOptions+0x216>
				{
					TIMER1_setCallBack(HECU_timer1CallBack); /* initialize this function as call back function */
     e72:	86 e3       	ldi	r24, 0x36	; 54
     e74:	99 e0       	ldi	r25, 0x09	; 9
     e76:	0e 94 49 19 	call	0x3292	; 0x3292 <TIMER1_setCallBack>
					TIMER1_init(&timer1Config); /* start the timer */
     e7a:	ce 01       	movw	r24, r28
     e7c:	8c 96       	adiw	r24, 0x2c	; 44
     e7e:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <TIMER1_init>
					HECU_UNLOCKING_DOOR_STRING; /* display door is unlocking on the LCD */
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
     e88:	8a ea       	ldi	r24, 0xAA	; 170
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
					while(1)
					{
						if (timer_counter == 2) /* after 15 seconds */
     e90:	80 91 f6 00 	lds	r24, 0x00F6
     e94:	82 30       	cpi	r24, 0x02	; 2
     e96:	09 f0       	breq	.+2      	; 0xe9a <HECU_mainOptions+0xee>
     e98:	8a c0       	rjmp	.+276    	; 0xfae <HECU_mainOptions+0x202>
						{
							LCD_sendCommand(LCD_CLEAR_COMMAND);
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
							LCD_displayString("Door is on Hold.");
     ea0:	89 eb       	ldi	r24, 0xB9	; 185
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e8       	ldi	r25, 0x80	; 128
     eac:	ab e3       	ldi	r26, 0x3B	; 59
     eae:	b5 e4       	ldi	r27, 0x45	; 69
     eb0:	8f a3       	std	Y+39, r24	; 0x27
     eb2:	98 a7       	std	Y+40, r25	; 0x28
     eb4:	a9 a7       	std	Y+41, r26	; 0x29
     eb6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb8:	6f a1       	ldd	r22, Y+39	; 0x27
     eba:	78 a5       	ldd	r23, Y+40	; 0x28
     ebc:	89 a5       	ldd	r24, Y+41	; 0x29
     ebe:	9a a5       	ldd	r25, Y+42	; 0x2a
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	4a ef       	ldi	r20, 0xFA	; 250
     ec6:	54 e4       	ldi	r21, 0x44	; 68
     ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	8b a3       	std	Y+35, r24	; 0x23
     ed2:	9c a3       	std	Y+36, r25	; 0x24
     ed4:	ad a3       	std	Y+37, r26	; 0x25
     ed6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     ed8:	6b a1       	ldd	r22, Y+35	; 0x23
     eda:	7c a1       	ldd	r23, Y+36	; 0x24
     edc:	8d a1       	ldd	r24, Y+37	; 0x25
     ede:	9e a1       	ldd	r25, Y+38	; 0x26
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e8       	ldi	r20, 0x80	; 128
     ee6:	5f e3       	ldi	r21, 0x3F	; 63
     ee8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eec:	88 23       	and	r24, r24
     eee:	2c f4       	brge	.+10     	; 0xefa <HECU_mainOptions+0x14e>
		__ticks = 1;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	9a a3       	std	Y+34, r25	; 0x22
     ef6:	89 a3       	std	Y+33, r24	; 0x21
     ef8:	3f c0       	rjmp	.+126    	; 0xf78 <HECU_mainOptions+0x1cc>
	else if (__tmp > 65535)
     efa:	6b a1       	ldd	r22, Y+35	; 0x23
     efc:	7c a1       	ldd	r23, Y+36	; 0x24
     efe:	8d a1       	ldd	r24, Y+37	; 0x25
     f00:	9e a1       	ldd	r25, Y+38	; 0x26
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	3f ef       	ldi	r19, 0xFF	; 255
     f06:	4f e7       	ldi	r20, 0x7F	; 127
     f08:	57 e4       	ldi	r21, 0x47	; 71
     f0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f0e:	18 16       	cp	r1, r24
     f10:	4c f5       	brge	.+82     	; 0xf64 <HECU_mainOptions+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f12:	6f a1       	ldd	r22, Y+39	; 0x27
     f14:	78 a5       	ldd	r23, Y+40	; 0x28
     f16:	89 a5       	ldd	r24, Y+41	; 0x29
     f18:	9a a5       	ldd	r25, Y+42	; 0x2a
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e2       	ldi	r20, 0x20	; 32
     f20:	51 e4       	ldi	r21, 0x41	; 65
     f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	bc 01       	movw	r22, r24
     f2c:	cd 01       	movw	r24, r26
     f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	9a a3       	std	Y+34, r25	; 0x22
     f38:	89 a3       	std	Y+33, r24	; 0x21
     f3a:	0f c0       	rjmp	.+30     	; 0xf5a <HECU_mainOptions+0x1ae>
     f3c:	88 ec       	ldi	r24, 0xC8	; 200
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	98 a3       	std	Y+32, r25	; 0x20
     f42:	8f 8f       	std	Y+31, r24	; 0x1f
     f44:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f46:	98 a1       	ldd	r25, Y+32	; 0x20
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	f1 f7       	brne	.-4      	; 0xf48 <HECU_mainOptions+0x19c>
     f4c:	98 a3       	std	Y+32, r25	; 0x20
     f4e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f50:	89 a1       	ldd	r24, Y+33	; 0x21
     f52:	9a a1       	ldd	r25, Y+34	; 0x22
     f54:	01 97       	sbiw	r24, 0x01	; 1
     f56:	9a a3       	std	Y+34, r25	; 0x22
     f58:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5a:	89 a1       	ldd	r24, Y+33	; 0x21
     f5c:	9a a1       	ldd	r25, Y+34	; 0x22
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	69 f7       	brne	.-38     	; 0xf3c <HECU_mainOptions+0x190>
     f62:	14 c0       	rjmp	.+40     	; 0xf8c <HECU_mainOptions+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f64:	6b a1       	ldd	r22, Y+35	; 0x23
     f66:	7c a1       	ldd	r23, Y+36	; 0x24
     f68:	8d a1       	ldd	r24, Y+37	; 0x25
     f6a:	9e a1       	ldd	r25, Y+38	; 0x26
     f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	9a a3       	std	Y+34, r25	; 0x22
     f76:	89 a3       	std	Y+33, r24	; 0x21
     f78:	89 a1       	ldd	r24, Y+33	; 0x21
     f7a:	9a a1       	ldd	r25, Y+34	; 0x22
     f7c:	9e 8f       	std	Y+30, r25	; 0x1e
     f7e:	8d 8f       	std	Y+29, r24	; 0x1d
     f80:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f82:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <HECU_mainOptions+0x1d8>
     f88:	9e 8f       	std	Y+30, r25	; 0x1e
     f8a:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(3000); /* Door is on Hold will be displayed for 3 seconds */
							TCNT1 = 0; /* reset starting timer count */
     f8c:	ec e4       	ldi	r30, 0x4C	; 76
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	11 82       	std	Z+1, r1	; 0x01
     f92:	10 82       	st	Z, r1
							HECU_LOCKING_DOOR_STRING;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
     f9a:	8a ec       	ldi	r24, 0xCA	; 202
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
							timer_counter++; /* increment the counter to prevent it from accessing this if condition again */
     fa2:	80 91 f6 00 	lds	r24, 0x00F6
     fa6:	8f 5f       	subi	r24, 0xFF	; 255
     fa8:	80 93 f6 00 	sts	0x00F6, r24
     fac:	71 cf       	rjmp	.-286    	; 0xe90 <HECU_mainOptions+0xe4>
						}
						else if (timer_counter == 5) /* after another 15 seconds ( its 5 not 4 because we incremented the timer counter in last if condition ) */
     fae:	80 91 f6 00 	lds	r24, 0x00F6
     fb2:	85 30       	cpi	r24, 0x05	; 5
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <HECU_mainOptions+0x20c>
     fb6:	6c cf       	rjmp	.-296    	; 0xe90 <HECU_mainOptions+0xe4>
						{
							TIMER1_deinit(); /* stop and clear timer */
     fb8:	0e 94 29 19 	call	0x3252	; 0x3252 <TIMER1_deinit>
							timer_counter = 0; /* reset timer counter */
     fbc:	10 92 f6 00 	sts	0x00F6, r1
     fc0:	4c c1       	rjmp	.+664    	; 0x125a <HECU_mainOptions+0x4ae>
							return;
						}
					}
				}
				else if (HECU_checkPassword == PASSWORD_N_MATCH ) /* if password is not matched */
     fc2:	80 91 f7 00 	lds	r24, 0x00F7
     fc6:	80 33       	cpi	r24, 0x30	; 48
     fc8:	09 f0       	breq	.+2      	; 0xfcc <HECU_mainOptions+0x220>
     fca:	32 cf       	rjmp	.-412    	; 0xe30 <HECU_mainOptions+0x84>
				{
					pw_wrong++; /* count how many times the password was entered incorrectly */
     fcc:	8b a5       	ldd	r24, Y+43	; 0x2b
     fce:	8f 5f       	subi	r24, 0xFF	; 255
     fd0:	8b a7       	std	Y+43, r24	; 0x2b
					if (pw_wrong == 3) /* if pw entered 3 times wrong */
     fd2:	8b a5       	ldd	r24, Y+43	; 0x2b
     fd4:	83 30       	cpi	r24, 0x03	; 3
     fd6:	09 f0       	breq	.+2      	; 0xfda <HECU_mainOptions+0x22e>
     fd8:	2b cf       	rjmp	.-426    	; 0xe30 <HECU_mainOptions+0x84>
					{
						LCD_sendCommand(LCD_CLEAR_COMMAND);
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
						LCD_displayString("ERROR!!!");
     fe0:	87 ed       	ldi	r24, 0xD7	; 215
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
						for ( i = 0 ; i < 60 ; i++) /* for loop for 60 times */
     fe8:	10 92 05 01 	sts	0x0105, r1
     fec:	77 c0       	rjmp	.+238    	; 0x10dc <HECU_mainOptions+0x330>
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	aa e7       	ldi	r26, 0x7A	; 122
     ff4:	b4 e4       	ldi	r27, 0x44	; 68
     ff6:	89 8f       	std	Y+25, r24	; 0x19
     ff8:	9a 8f       	std	Y+26, r25	; 0x1a
     ffa:	ab 8f       	std	Y+27, r26	; 0x1b
     ffc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ffe:	69 8d       	ldd	r22, Y+25	; 0x19
    1000:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1002:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1004:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	4a ef       	ldi	r20, 0xFA	; 250
    100c:	54 e4       	ldi	r21, 0x44	; 68
    100e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1012:	dc 01       	movw	r26, r24
    1014:	cb 01       	movw	r24, r22
    1016:	8d 8b       	std	Y+21, r24	; 0x15
    1018:	9e 8b       	std	Y+22, r25	; 0x16
    101a:	af 8b       	std	Y+23, r26	; 0x17
    101c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    101e:	6d 89       	ldd	r22, Y+21	; 0x15
    1020:	7e 89       	ldd	r23, Y+22	; 0x16
    1022:	8f 89       	ldd	r24, Y+23	; 0x17
    1024:	98 8d       	ldd	r25, Y+24	; 0x18
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e8       	ldi	r20, 0x80	; 128
    102c:	5f e3       	ldi	r21, 0x3F	; 63
    102e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1032:	88 23       	and	r24, r24
    1034:	2c f4       	brge	.+10     	; 0x1040 <HECU_mainOptions+0x294>
		__ticks = 1;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	9c 8b       	std	Y+20, r25	; 0x14
    103c:	8b 8b       	std	Y+19, r24	; 0x13
    103e:	3f c0       	rjmp	.+126    	; 0x10be <HECU_mainOptions+0x312>
	else if (__tmp > 65535)
    1040:	6d 89       	ldd	r22, Y+21	; 0x15
    1042:	7e 89       	ldd	r23, Y+22	; 0x16
    1044:	8f 89       	ldd	r24, Y+23	; 0x17
    1046:	98 8d       	ldd	r25, Y+24	; 0x18
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	3f ef       	ldi	r19, 0xFF	; 255
    104c:	4f e7       	ldi	r20, 0x7F	; 127
    104e:	57 e4       	ldi	r21, 0x47	; 71
    1050:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1054:	18 16       	cp	r1, r24
    1056:	4c f5       	brge	.+82     	; 0x10aa <HECU_mainOptions+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1058:	69 8d       	ldd	r22, Y+25	; 0x19
    105a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    105c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    105e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e2       	ldi	r20, 0x20	; 32
    1066:	51 e4       	ldi	r21, 0x41	; 65
    1068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	bc 01       	movw	r22, r24
    1072:	cd 01       	movw	r24, r26
    1074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	9c 8b       	std	Y+20, r25	; 0x14
    107e:	8b 8b       	std	Y+19, r24	; 0x13
    1080:	0f c0       	rjmp	.+30     	; 0x10a0 <HECU_mainOptions+0x2f4>
    1082:	88 ec       	ldi	r24, 0xC8	; 200
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	9a 8b       	std	Y+18, r25	; 0x12
    1088:	89 8b       	std	Y+17, r24	; 0x11
    108a:	89 89       	ldd	r24, Y+17	; 0x11
    108c:	9a 89       	ldd	r25, Y+18	; 0x12
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	f1 f7       	brne	.-4      	; 0x108e <HECU_mainOptions+0x2e2>
    1092:	9a 8b       	std	Y+18, r25	; 0x12
    1094:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1096:	8b 89       	ldd	r24, Y+19	; 0x13
    1098:	9c 89       	ldd	r25, Y+20	; 0x14
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	9c 8b       	std	Y+20, r25	; 0x14
    109e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a0:	8b 89       	ldd	r24, Y+19	; 0x13
    10a2:	9c 89       	ldd	r25, Y+20	; 0x14
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	69 f7       	brne	.-38     	; 0x1082 <HECU_mainOptions+0x2d6>
    10a8:	14 c0       	rjmp	.+40     	; 0x10d2 <HECU_mainOptions+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10aa:	6d 89       	ldd	r22, Y+21	; 0x15
    10ac:	7e 89       	ldd	r23, Y+22	; 0x16
    10ae:	8f 89       	ldd	r24, Y+23	; 0x17
    10b0:	98 8d       	ldd	r25, Y+24	; 0x18
    10b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	9c 8b       	std	Y+20, r25	; 0x14
    10bc:	8b 8b       	std	Y+19, r24	; 0x13
    10be:	8b 89       	ldd	r24, Y+19	; 0x13
    10c0:	9c 89       	ldd	r25, Y+20	; 0x14
    10c2:	98 8b       	std	Y+16, r25	; 0x10
    10c4:	8f 87       	std	Y+15, r24	; 0x0f
    10c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10c8:	98 89       	ldd	r25, Y+16	; 0x10
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <HECU_mainOptions+0x31e>
    10ce:	98 8b       	std	Y+16, r25	; 0x10
    10d0:	8f 87       	std	Y+15, r24	; 0x0f
    10d2:	80 91 05 01 	lds	r24, 0x0105
    10d6:	8f 5f       	subi	r24, 0xFF	; 255
    10d8:	80 93 05 01 	sts	0x0105, r24
    10dc:	80 91 05 01 	lds	r24, 0x0105
    10e0:	8c 33       	cpi	r24, 0x3C	; 60
    10e2:	08 f4       	brcc	.+2      	; 0x10e6 <HECU_mainOptions+0x33a>
    10e4:	84 cf       	rjmp	.-248    	; 0xfee <HECU_mainOptions+0x242>
						{
							_delay_ms(1000); /* 1 second delay for 60 times to freeze the system for 1 minute */
						}
						pw_wrong = 0; /* reset the counter */
    10e6:	1b a6       	std	Y+43, r1	; 0x2b
						/* we will loop to enter the pw one more time */
					}
				}
			}
		}
		if ( HECU_keyInput == '-')
    10e8:	80 91 f8 00 	lds	r24, 0x00F8
    10ec:	8d 32       	cpi	r24, 0x2D	; 45
    10ee:	09 f0       	breq	.+2      	; 0x10f2 <HECU_mainOptions+0x346>
    10f0:	88 ce       	rjmp	.-752    	; 0xe02 <HECU_mainOptions+0x56>
		{
			while(1)
			{
				UART_sendByte(CHANGE_PASSWORD);
    10f2:	80 e6       	ldi	r24, 0x60	; 96
    10f4:	0e 94 f6 19 	call	0x33ec	; 0x33ec <UART_sendByte>
				HECU_PLZ_ENTER_PASS_STRING;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
    10fe:	8e e0       	ldi	r24, 0x0E	; 14
    1100:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
    1104:	20 e6       	ldi	r18, 0x60	; 96
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	a9 01       	movw	r20, r18
    110e:	0e 94 27 18 	call	0x304e	; 0x304e <LCD_displayStringRowColumn>
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
				HECU_typePassword(HECU_passwordConfirm);
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	91 e0       	ldi	r25, 0x01	; 1
    111e:	0e 94 13 06 	call	0xc26	; 0xc26 <HECU_typePassword>
				HECU_checkPassword = UART_recieveByte();
    1122:	0e 94 0d 1a 	call	0x341a	; 0x341a <UART_recieveByte>
    1126:	80 93 f7 00 	sts	0x00F7, r24
				if (HECU_checkPassword == PASSWORD_MATCH)
    112a:	80 91 f7 00 	lds	r24, 0x00F7
    112e:	80 32       	cpi	r24, 0x20	; 32
    1130:	11 f4       	brne	.+4      	; 0x1136 <HECU_mainOptions+0x38a>
				{
					pw_wrong = 0; /* reset the number of times the pw was entered wrong because we wont reach this if condition if pw is correct */
    1132:	1b a6       	std	Y+43, r1	; 0x2b
    1134:	92 c0       	rjmp	.+292    	; 0x125a <HECU_mainOptions+0x4ae>
					return; /* if the password is correct we will return to step 1 to change the password */
				}
				else if (HECU_checkPassword == PASSWORD_N_MATCH )
    1136:	80 91 f7 00 	lds	r24, 0x00F7
    113a:	80 33       	cpi	r24, 0x30	; 48
    113c:	d1 f6       	brne	.-76     	; 0x10f2 <HECU_mainOptions+0x346>
				{
					pw_wrong++; /* count how many times the password was entered incorrectly */
    113e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1140:	8f 5f       	subi	r24, 0xFF	; 255
    1142:	8b a7       	std	Y+43, r24	; 0x2b
					if (pw_wrong == 3) /* if pw entered 3 times wrong */
    1144:	8b a5       	ldd	r24, Y+43	; 0x2b
    1146:	83 30       	cpi	r24, 0x03	; 3
    1148:	a1 f6       	brne	.-88     	; 0x10f2 <HECU_mainOptions+0x346>
					{
						LCD_sendCommand(LCD_CLEAR_COMMAND);
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
						LCD_displayString("ERROR!!!");
    1150:	87 ed       	ldi	r24, 0xD7	; 215
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
						for ( i=0 ; i<60 ; i++) /* 1 second delay for 60 times to freeze the system for 1 minute */
    1158:	10 92 05 01 	sts	0x0105, r1
    115c:	77 c0       	rjmp	.+238    	; 0x124c <HECU_mainOptions+0x4a0>
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	aa e7       	ldi	r26, 0x7A	; 122
    1164:	b4 e4       	ldi	r27, 0x44	; 68
    1166:	8b 87       	std	Y+11, r24	; 0x0b
    1168:	9c 87       	std	Y+12, r25	; 0x0c
    116a:	ad 87       	std	Y+13, r26	; 0x0d
    116c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    116e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1170:	7c 85       	ldd	r23, Y+12	; 0x0c
    1172:	8d 85       	ldd	r24, Y+13	; 0x0d
    1174:	9e 85       	ldd	r25, Y+14	; 0x0e
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	4a ef       	ldi	r20, 0xFA	; 250
    117c:	54 e4       	ldi	r21, 0x44	; 68
    117e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	8f 83       	std	Y+7, r24	; 0x07
    1188:	98 87       	std	Y+8, r25	; 0x08
    118a:	a9 87       	std	Y+9, r26	; 0x09
    118c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    118e:	6f 81       	ldd	r22, Y+7	; 0x07
    1190:	78 85       	ldd	r23, Y+8	; 0x08
    1192:	89 85       	ldd	r24, Y+9	; 0x09
    1194:	9a 85       	ldd	r25, Y+10	; 0x0a
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	40 e8       	ldi	r20, 0x80	; 128
    119c:	5f e3       	ldi	r21, 0x3F	; 63
    119e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11a2:	88 23       	and	r24, r24
    11a4:	2c f4       	brge	.+10     	; 0x11b0 <HECU_mainOptions+0x404>
		__ticks = 1;
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	9e 83       	std	Y+6, r25	; 0x06
    11ac:	8d 83       	std	Y+5, r24	; 0x05
    11ae:	3f c0       	rjmp	.+126    	; 0x122e <HECU_mainOptions+0x482>
	else if (__tmp > 65535)
    11b0:	6f 81       	ldd	r22, Y+7	; 0x07
    11b2:	78 85       	ldd	r23, Y+8	; 0x08
    11b4:	89 85       	ldd	r24, Y+9	; 0x09
    11b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	3f ef       	ldi	r19, 0xFF	; 255
    11bc:	4f e7       	ldi	r20, 0x7F	; 127
    11be:	57 e4       	ldi	r21, 0x47	; 71
    11c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11c4:	18 16       	cp	r1, r24
    11c6:	4c f5       	brge	.+82     	; 0x121a <HECU_mainOptions+0x46e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    11cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e2       	ldi	r20, 0x20	; 32
    11d6:	51 e4       	ldi	r21, 0x41	; 65
    11d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	bc 01       	movw	r22, r24
    11e2:	cd 01       	movw	r24, r26
    11e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e8:	dc 01       	movw	r26, r24
    11ea:	cb 01       	movw	r24, r22
    11ec:	9e 83       	std	Y+6, r25	; 0x06
    11ee:	8d 83       	std	Y+5, r24	; 0x05
    11f0:	0f c0       	rjmp	.+30     	; 0x1210 <HECU_mainOptions+0x464>
    11f2:	88 ec       	ldi	r24, 0xC8	; 200
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	9c 83       	std	Y+4, r25	; 0x04
    11f8:	8b 83       	std	Y+3, r24	; 0x03
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	f1 f7       	brne	.-4      	; 0x11fe <HECU_mainOptions+0x452>
    1202:	9c 83       	std	Y+4, r25	; 0x04
    1204:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1206:	8d 81       	ldd	r24, Y+5	; 0x05
    1208:	9e 81       	ldd	r25, Y+6	; 0x06
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	9e 83       	std	Y+6, r25	; 0x06
    120e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1210:	8d 81       	ldd	r24, Y+5	; 0x05
    1212:	9e 81       	ldd	r25, Y+6	; 0x06
    1214:	00 97       	sbiw	r24, 0x00	; 0
    1216:	69 f7       	brne	.-38     	; 0x11f2 <HECU_mainOptions+0x446>
    1218:	14 c0       	rjmp	.+40     	; 0x1242 <HECU_mainOptions+0x496>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    121a:	6f 81       	ldd	r22, Y+7	; 0x07
    121c:	78 85       	ldd	r23, Y+8	; 0x08
    121e:	89 85       	ldd	r24, Y+9	; 0x09
    1220:	9a 85       	ldd	r25, Y+10	; 0x0a
    1222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	9e 83       	std	Y+6, r25	; 0x06
    122c:	8d 83       	std	Y+5, r24	; 0x05
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	9a 83       	std	Y+2, r25	; 0x02
    1234:	89 83       	std	Y+1, r24	; 0x01
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	9a 81       	ldd	r25, Y+2	; 0x02
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	f1 f7       	brne	.-4      	; 0x123a <HECU_mainOptions+0x48e>
    123e:	9a 83       	std	Y+2, r25	; 0x02
    1240:	89 83       	std	Y+1, r24	; 0x01
    1242:	80 91 05 01 	lds	r24, 0x0105
    1246:	8f 5f       	subi	r24, 0xFF	; 255
    1248:	80 93 05 01 	sts	0x0105, r24
    124c:	80 91 05 01 	lds	r24, 0x0105
    1250:	8c 33       	cpi	r24, 0x3C	; 60
    1252:	08 f4       	brcc	.+2      	; 0x1256 <HECU_mainOptions+0x4aa>
    1254:	84 cf       	rjmp	.-248    	; 0x115e <HECU_mainOptions+0x3b2>
						{
							_delay_ms(1000);
						}
						pw_wrong = 0; /* reset the counter */
    1256:	1b a6       	std	Y+43, r1	; 0x2b
    1258:	d4 cd       	rjmp	.-1112   	; 0xe02 <HECU_mainOptions+0x56>
					}
				}
			}
		}
	}
}
    125a:	e6 96       	adiw	r28, 0x36	; 54
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	08 95       	ret

0000126c <HECU_timer1CallBack>:
/*
 * Description :
 * the CallBackfunction which will be called in the ISR every 7.5 seconds
 */
void HECU_timer1CallBack(void)
{
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
	timer_counter++;
    1274:	80 91 f6 00 	lds	r24, 0x00F6
    1278:	8f 5f       	subi	r24, 0xFF	; 255
    127a:	80 93 f6 00 	sts	0x00F6, r24
}
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	00 d0       	rcall	.+0      	; 0x128a <GPIO_setupPinDirection+0x6>
    128a:	00 d0       	rcall	.+0      	; 0x128c <GPIO_setupPinDirection+0x8>
    128c:	0f 92       	push	r0
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	6a 83       	std	Y+2, r22	; 0x02
    1296:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	88 30       	cpi	r24, 0x08	; 8
    129c:	08 f0       	brcs	.+2      	; 0x12a0 <GPIO_setupPinDirection+0x1c>
    129e:	d5 c0       	rjmp	.+426    	; 0x144a <GPIO_setupPinDirection+0x1c6>
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	84 30       	cpi	r24, 0x04	; 4
    12a4:	08 f0       	brcs	.+2      	; 0x12a8 <GPIO_setupPinDirection+0x24>
    12a6:	d1 c0       	rjmp	.+418    	; 0x144a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	28 2f       	mov	r18, r24
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	3d 83       	std	Y+5, r19	; 0x05
    12b0:	2c 83       	std	Y+4, r18	; 0x04
    12b2:	8c 81       	ldd	r24, Y+4	; 0x04
    12b4:	9d 81       	ldd	r25, Y+5	; 0x05
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	91 05       	cpc	r25, r1
    12ba:	09 f4       	brne	.+2      	; 0x12be <GPIO_setupPinDirection+0x3a>
    12bc:	43 c0       	rjmp	.+134    	; 0x1344 <GPIO_setupPinDirection+0xc0>
    12be:	2c 81       	ldd	r18, Y+4	; 0x04
    12c0:	3d 81       	ldd	r19, Y+5	; 0x05
    12c2:	22 30       	cpi	r18, 0x02	; 2
    12c4:	31 05       	cpc	r19, r1
    12c6:	2c f4       	brge	.+10     	; 0x12d2 <GPIO_setupPinDirection+0x4e>
    12c8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ca:	9d 81       	ldd	r25, Y+5	; 0x05
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	71 f0       	breq	.+28     	; 0x12ec <GPIO_setupPinDirection+0x68>
    12d0:	bc c0       	rjmp	.+376    	; 0x144a <GPIO_setupPinDirection+0x1c6>
    12d2:	2c 81       	ldd	r18, Y+4	; 0x04
    12d4:	3d 81       	ldd	r19, Y+5	; 0x05
    12d6:	22 30       	cpi	r18, 0x02	; 2
    12d8:	31 05       	cpc	r19, r1
    12da:	09 f4       	brne	.+2      	; 0x12de <GPIO_setupPinDirection+0x5a>
    12dc:	5f c0       	rjmp	.+190    	; 0x139c <GPIO_setupPinDirection+0x118>
    12de:	8c 81       	ldd	r24, Y+4	; 0x04
    12e0:	9d 81       	ldd	r25, Y+5	; 0x05
    12e2:	83 30       	cpi	r24, 0x03	; 3
    12e4:	91 05       	cpc	r25, r1
    12e6:	09 f4       	brne	.+2      	; 0x12ea <GPIO_setupPinDirection+0x66>
    12e8:	85 c0       	rjmp	.+266    	; 0x13f4 <GPIO_setupPinDirection+0x170>
    12ea:	af c0       	rjmp	.+350    	; 0x144a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	a1 f4       	brne	.+40     	; 0x131a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    12f2:	aa e3       	ldi	r26, 0x3A	; 58
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	ea e3       	ldi	r30, 0x3A	; 58
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 2e       	mov	r0, r18
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <GPIO_setupPinDirection+0x8c>
    130c:	88 0f       	add	r24, r24
    130e:	99 1f       	adc	r25, r25
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <GPIO_setupPinDirection+0x88>
    1314:	84 2b       	or	r24, r20
    1316:	8c 93       	st	X, r24
    1318:	98 c0       	rjmp	.+304    	; 0x144a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    131a:	aa e3       	ldi	r26, 0x3A	; 58
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	ea e3       	ldi	r30, 0x3A	; 58
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <GPIO_setupPinDirection+0xb4>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <GPIO_setupPinDirection+0xb0>
    133c:	80 95       	com	r24
    133e:	84 23       	and	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	83 c0       	rjmp	.+262    	; 0x144a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	a1 f4       	brne	.+40     	; 0x1372 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    134a:	a7 e3       	ldi	r26, 0x37	; 55
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e7 e3       	ldi	r30, 0x37	; 55
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <GPIO_setupPinDirection+0xe4>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <GPIO_setupPinDirection+0xe0>
    136c:	84 2b       	or	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	6c c0       	rjmp	.+216    	; 0x144a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1372:	a7 e3       	ldi	r26, 0x37	; 55
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e7 e3       	ldi	r30, 0x37	; 55
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <GPIO_setupPinDirection+0x10c>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <GPIO_setupPinDirection+0x108>
    1394:	80 95       	com	r24
    1396:	84 23       	and	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	57 c0       	rjmp	.+174    	; 0x144a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	a1 f4       	brne	.+40     	; 0x13ca <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    13a2:	a4 e3       	ldi	r26, 0x34	; 52
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e4 e3       	ldi	r30, 0x34	; 52
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <GPIO_setupPinDirection+0x13c>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <GPIO_setupPinDirection+0x138>
    13c4:	84 2b       	or	r24, r20
    13c6:	8c 93       	st	X, r24
    13c8:	40 c0       	rjmp	.+128    	; 0x144a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    13ca:	a4 e3       	ldi	r26, 0x34	; 52
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e4 e3       	ldi	r30, 0x34	; 52
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	48 2f       	mov	r20, r24
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	02 2e       	mov	r0, r18
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <GPIO_setupPinDirection+0x164>
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	0a 94       	dec	r0
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <GPIO_setupPinDirection+0x160>
    13ec:	80 95       	com	r24
    13ee:	84 23       	and	r24, r20
    13f0:	8c 93       	st	X, r24
    13f2:	2b c0       	rjmp	.+86     	; 0x144a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	a1 f4       	brne	.+40     	; 0x1422 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    13fa:	a1 e3       	ldi	r26, 0x31	; 49
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	e1 e3       	ldi	r30, 0x31	; 49
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	48 2f       	mov	r20, r24
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	02 2e       	mov	r0, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <GPIO_setupPinDirection+0x194>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	0a 94       	dec	r0
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <GPIO_setupPinDirection+0x190>
    141c:	84 2b       	or	r24, r20
    141e:	8c 93       	st	X, r24
    1420:	14 c0       	rjmp	.+40     	; 0x144a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1422:	a1 e3       	ldi	r26, 0x31	; 49
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e1 e3       	ldi	r30, 0x31	; 49
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	48 2f       	mov	r20, r24
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	02 2e       	mov	r0, r18
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <GPIO_setupPinDirection+0x1bc>
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	0a 94       	dec	r0
    1442:	e2 f7       	brpl	.-8      	; 0x143c <GPIO_setupPinDirection+0x1b8>
    1444:	80 95       	com	r24
    1446:	84 23       	and	r24, r20
    1448:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	00 d0       	rcall	.+0      	; 0x1460 <GPIO_writePin+0x6>
    1460:	00 d0       	rcall	.+0      	; 0x1462 <GPIO_writePin+0x8>
    1462:	0f 92       	push	r0
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	89 83       	std	Y+1, r24	; 0x01
    146a:	6a 83       	std	Y+2, r22	; 0x02
    146c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	88 30       	cpi	r24, 0x08	; 8
    1472:	08 f0       	brcs	.+2      	; 0x1476 <GPIO_writePin+0x1c>
    1474:	d5 c0       	rjmp	.+426    	; 0x1620 <GPIO_writePin+0x1c6>
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	84 30       	cpi	r24, 0x04	; 4
    147a:	08 f0       	brcs	.+2      	; 0x147e <GPIO_writePin+0x24>
    147c:	d1 c0       	rjmp	.+418    	; 0x1620 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	3d 83       	std	Y+5, r19	; 0x05
    1486:	2c 83       	std	Y+4, r18	; 0x04
    1488:	8c 81       	ldd	r24, Y+4	; 0x04
    148a:	9d 81       	ldd	r25, Y+5	; 0x05
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	91 05       	cpc	r25, r1
    1490:	09 f4       	brne	.+2      	; 0x1494 <GPIO_writePin+0x3a>
    1492:	43 c0       	rjmp	.+134    	; 0x151a <GPIO_writePin+0xc0>
    1494:	2c 81       	ldd	r18, Y+4	; 0x04
    1496:	3d 81       	ldd	r19, Y+5	; 0x05
    1498:	22 30       	cpi	r18, 0x02	; 2
    149a:	31 05       	cpc	r19, r1
    149c:	2c f4       	brge	.+10     	; 0x14a8 <GPIO_writePin+0x4e>
    149e:	8c 81       	ldd	r24, Y+4	; 0x04
    14a0:	9d 81       	ldd	r25, Y+5	; 0x05
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	71 f0       	breq	.+28     	; 0x14c2 <GPIO_writePin+0x68>
    14a6:	bc c0       	rjmp	.+376    	; 0x1620 <GPIO_writePin+0x1c6>
    14a8:	2c 81       	ldd	r18, Y+4	; 0x04
    14aa:	3d 81       	ldd	r19, Y+5	; 0x05
    14ac:	22 30       	cpi	r18, 0x02	; 2
    14ae:	31 05       	cpc	r19, r1
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <GPIO_writePin+0x5a>
    14b2:	5f c0       	rjmp	.+190    	; 0x1572 <GPIO_writePin+0x118>
    14b4:	8c 81       	ldd	r24, Y+4	; 0x04
    14b6:	9d 81       	ldd	r25, Y+5	; 0x05
    14b8:	83 30       	cpi	r24, 0x03	; 3
    14ba:	91 05       	cpc	r25, r1
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <GPIO_writePin+0x66>
    14be:	85 c0       	rjmp	.+266    	; 0x15ca <GPIO_writePin+0x170>
    14c0:	af c0       	rjmp	.+350    	; 0x1620 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	81 30       	cpi	r24, 0x01	; 1
    14c6:	a1 f4       	brne	.+40     	; 0x14f0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    14c8:	ab e3       	ldi	r26, 0x3B	; 59
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	eb e3       	ldi	r30, 0x3B	; 59
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	48 2f       	mov	r20, r24
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 2e       	mov	r0, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <GPIO_writePin+0x8c>
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	0a 94       	dec	r0
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <GPIO_writePin+0x88>
    14ea:	84 2b       	or	r24, r20
    14ec:	8c 93       	st	X, r24
    14ee:	98 c0       	rjmp	.+304    	; 0x1620 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    14f0:	ab e3       	ldi	r26, 0x3B	; 59
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	eb e3       	ldi	r30, 0x3B	; 59
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	48 2f       	mov	r20, r24
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 2e       	mov	r0, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <GPIO_writePin+0xb4>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	0a 94       	dec	r0
    1510:	e2 f7       	brpl	.-8      	; 0x150a <GPIO_writePin+0xb0>
    1512:	80 95       	com	r24
    1514:	84 23       	and	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	83 c0       	rjmp	.+262    	; 0x1620 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	81 30       	cpi	r24, 0x01	; 1
    151e:	a1 f4       	brne	.+40     	; 0x1548 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1520:	a8 e3       	ldi	r26, 0x38	; 56
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e8 e3       	ldi	r30, 0x38	; 56
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	48 2f       	mov	r20, r24
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	02 2e       	mov	r0, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <GPIO_writePin+0xe4>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	0a 94       	dec	r0
    1540:	e2 f7       	brpl	.-8      	; 0x153a <GPIO_writePin+0xe0>
    1542:	84 2b       	or	r24, r20
    1544:	8c 93       	st	X, r24
    1546:	6c c0       	rjmp	.+216    	; 0x1620 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1548:	a8 e3       	ldi	r26, 0x38	; 56
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e8 e3       	ldi	r30, 0x38	; 56
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <GPIO_writePin+0x10c>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <GPIO_writePin+0x108>
    156a:	80 95       	com	r24
    156c:	84 23       	and	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	57 c0       	rjmp	.+174    	; 0x1620 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	a1 f4       	brne	.+40     	; 0x15a0 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1578:	a5 e3       	ldi	r26, 0x35	; 53
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e5 e3       	ldi	r30, 0x35	; 53
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	48 2f       	mov	r20, r24
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <GPIO_writePin+0x13c>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <GPIO_writePin+0x138>
    159a:	84 2b       	or	r24, r20
    159c:	8c 93       	st	X, r24
    159e:	40 c0       	rjmp	.+128    	; 0x1620 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    15a0:	a5 e3       	ldi	r26, 0x35	; 53
    15a2:	b0 e0       	ldi	r27, 0x00	; 0
    15a4:	e5 e3       	ldi	r30, 0x35	; 53
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	80 81       	ld	r24, Z
    15aa:	48 2f       	mov	r20, r24
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	02 2e       	mov	r0, r18
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <GPIO_writePin+0x164>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	0a 94       	dec	r0
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <GPIO_writePin+0x160>
    15c2:	80 95       	com	r24
    15c4:	84 23       	and	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	2b c0       	rjmp	.+86     	; 0x1620 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	a1 f4       	brne	.+40     	; 0x15f8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    15d0:	a2 e3       	ldi	r26, 0x32	; 50
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	e2 e3       	ldi	r30, 0x32	; 50
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <GPIO_writePin+0x194>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <GPIO_writePin+0x190>
    15f2:	84 2b       	or	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	14 c0       	rjmp	.+40     	; 0x1620 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    15f8:	a2 e3       	ldi	r26, 0x32	; 50
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e2 e3       	ldi	r30, 0x32	; 50
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 2e       	mov	r0, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <GPIO_writePin+0x1bc>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <GPIO_writePin+0x1b8>
    161a:	80 95       	com	r24
    161c:	84 23       	and	r24, r20
    161e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	0f 90       	pop	r0
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	00 d0       	rcall	.+0      	; 0x1636 <GPIO_readPin+0x6>
    1636:	00 d0       	rcall	.+0      	; 0x1638 <GPIO_readPin+0x8>
    1638:	0f 92       	push	r0
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	8a 83       	std	Y+2, r24	; 0x02
    1640:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1642:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	88 30       	cpi	r24, 0x08	; 8
    1648:	08 f0       	brcs	.+2      	; 0x164c <GPIO_readPin+0x1c>
    164a:	84 c0       	rjmp	.+264    	; 0x1754 <GPIO_readPin+0x124>
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	84 30       	cpi	r24, 0x04	; 4
    1650:	08 f0       	brcs	.+2      	; 0x1654 <GPIO_readPin+0x24>
    1652:	80 c0       	rjmp	.+256    	; 0x1754 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	3d 83       	std	Y+5, r19	; 0x05
    165c:	2c 83       	std	Y+4, r18	; 0x04
    165e:	4c 81       	ldd	r20, Y+4	; 0x04
    1660:	5d 81       	ldd	r21, Y+5	; 0x05
    1662:	41 30       	cpi	r20, 0x01	; 1
    1664:	51 05       	cpc	r21, r1
    1666:	79 f1       	breq	.+94     	; 0x16c6 <GPIO_readPin+0x96>
    1668:	8c 81       	ldd	r24, Y+4	; 0x04
    166a:	9d 81       	ldd	r25, Y+5	; 0x05
    166c:	82 30       	cpi	r24, 0x02	; 2
    166e:	91 05       	cpc	r25, r1
    1670:	34 f4       	brge	.+12     	; 0x167e <GPIO_readPin+0x4e>
    1672:	2c 81       	ldd	r18, Y+4	; 0x04
    1674:	3d 81       	ldd	r19, Y+5	; 0x05
    1676:	21 15       	cp	r18, r1
    1678:	31 05       	cpc	r19, r1
    167a:	69 f0       	breq	.+26     	; 0x1696 <GPIO_readPin+0x66>
    167c:	6b c0       	rjmp	.+214    	; 0x1754 <GPIO_readPin+0x124>
    167e:	4c 81       	ldd	r20, Y+4	; 0x04
    1680:	5d 81       	ldd	r21, Y+5	; 0x05
    1682:	42 30       	cpi	r20, 0x02	; 2
    1684:	51 05       	cpc	r21, r1
    1686:	b9 f1       	breq	.+110    	; 0x16f6 <GPIO_readPin+0xc6>
    1688:	8c 81       	ldd	r24, Y+4	; 0x04
    168a:	9d 81       	ldd	r25, Y+5	; 0x05
    168c:	83 30       	cpi	r24, 0x03	; 3
    168e:	91 05       	cpc	r25, r1
    1690:	09 f4       	brne	.+2      	; 0x1694 <GPIO_readPin+0x64>
    1692:	49 c0       	rjmp	.+146    	; 0x1726 <GPIO_readPin+0xf6>
    1694:	5f c0       	rjmp	.+190    	; 0x1754 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1696:	e9 e3       	ldi	r30, 0x39	; 57
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	88 2f       	mov	r24, r24
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	a9 01       	movw	r20, r18
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <GPIO_readPin+0x7e>
    16aa:	55 95       	asr	r21
    16ac:	47 95       	ror	r20
    16ae:	8a 95       	dec	r24
    16b0:	e2 f7       	brpl	.-8      	; 0x16aa <GPIO_readPin+0x7a>
    16b2:	ca 01       	movw	r24, r20
    16b4:	81 70       	andi	r24, 0x01	; 1
    16b6:	90 70       	andi	r25, 0x00	; 0
    16b8:	88 23       	and	r24, r24
    16ba:	19 f0       	breq	.+6      	; 0x16c2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	89 83       	std	Y+1, r24	; 0x01
    16c0:	49 c0       	rjmp	.+146    	; 0x1754 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    16c2:	19 82       	std	Y+1, r1	; 0x01
    16c4:	47 c0       	rjmp	.+142    	; 0x1754 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    16c6:	e6 e3       	ldi	r30, 0x36	; 54
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	88 2f       	mov	r24, r24
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	a9 01       	movw	r20, r18
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <GPIO_readPin+0xae>
    16da:	55 95       	asr	r21
    16dc:	47 95       	ror	r20
    16de:	8a 95       	dec	r24
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <GPIO_readPin+0xaa>
    16e2:	ca 01       	movw	r24, r20
    16e4:	81 70       	andi	r24, 0x01	; 1
    16e6:	90 70       	andi	r25, 0x00	; 0
    16e8:	88 23       	and	r24, r24
    16ea:	19 f0       	breq	.+6      	; 0x16f2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	31 c0       	rjmp	.+98     	; 0x1754 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    16f2:	19 82       	std	Y+1, r1	; 0x01
    16f4:	2f c0       	rjmp	.+94     	; 0x1754 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    16f6:	e3 e3       	ldi	r30, 0x33	; 51
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	88 2f       	mov	r24, r24
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	a9 01       	movw	r20, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <GPIO_readPin+0xde>
    170a:	55 95       	asr	r21
    170c:	47 95       	ror	r20
    170e:	8a 95       	dec	r24
    1710:	e2 f7       	brpl	.-8      	; 0x170a <GPIO_readPin+0xda>
    1712:	ca 01       	movw	r24, r20
    1714:	81 70       	andi	r24, 0x01	; 1
    1716:	90 70       	andi	r25, 0x00	; 0
    1718:	88 23       	and	r24, r24
    171a:	19 f0       	breq	.+6      	; 0x1722 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	89 83       	std	Y+1, r24	; 0x01
    1720:	19 c0       	rjmp	.+50     	; 0x1754 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1722:	19 82       	std	Y+1, r1	; 0x01
    1724:	17 c0       	rjmp	.+46     	; 0x1754 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1726:	e0 e3       	ldi	r30, 0x30	; 48
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	28 2f       	mov	r18, r24
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	88 2f       	mov	r24, r24
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	a9 01       	movw	r20, r18
    1738:	02 c0       	rjmp	.+4      	; 0x173e <GPIO_readPin+0x10e>
    173a:	55 95       	asr	r21
    173c:	47 95       	ror	r20
    173e:	8a 95       	dec	r24
    1740:	e2 f7       	brpl	.-8      	; 0x173a <GPIO_readPin+0x10a>
    1742:	ca 01       	movw	r24, r20
    1744:	81 70       	andi	r24, 0x01	; 1
    1746:	90 70       	andi	r25, 0x00	; 0
    1748:	88 23       	and	r24, r24
    174a:	19 f0       	breq	.+6      	; 0x1752 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	89 83       	std	Y+1, r24	; 0x01
    1750:	01 c0       	rjmp	.+2      	; 0x1754 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1752:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1754:	89 81       	ldd	r24, Y+1	; 0x01
}
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	cf 91       	pop	r28
    1762:	df 91       	pop	r29
    1764:	08 95       	ret

00001766 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1766:	df 93       	push	r29
    1768:	cf 93       	push	r28
    176a:	00 d0       	rcall	.+0      	; 0x176c <GPIO_setupPortDirection+0x6>
    176c:	00 d0       	rcall	.+0      	; 0x176e <GPIO_setupPortDirection+0x8>
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	84 30       	cpi	r24, 0x04	; 4
    177a:	90 f5       	brcc	.+100    	; 0x17e0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    177c:	89 81       	ldd	r24, Y+1	; 0x01
    177e:	28 2f       	mov	r18, r24
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	3c 83       	std	Y+4, r19	; 0x04
    1784:	2b 83       	std	Y+3, r18	; 0x03
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	9c 81       	ldd	r25, Y+4	; 0x04
    178a:	81 30       	cpi	r24, 0x01	; 1
    178c:	91 05       	cpc	r25, r1
    178e:	d1 f0       	breq	.+52     	; 0x17c4 <GPIO_setupPortDirection+0x5e>
    1790:	2b 81       	ldd	r18, Y+3	; 0x03
    1792:	3c 81       	ldd	r19, Y+4	; 0x04
    1794:	22 30       	cpi	r18, 0x02	; 2
    1796:	31 05       	cpc	r19, r1
    1798:	2c f4       	brge	.+10     	; 0x17a4 <GPIO_setupPortDirection+0x3e>
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	61 f0       	breq	.+24     	; 0x17ba <GPIO_setupPortDirection+0x54>
    17a2:	1e c0       	rjmp	.+60     	; 0x17e0 <GPIO_setupPortDirection+0x7a>
    17a4:	2b 81       	ldd	r18, Y+3	; 0x03
    17a6:	3c 81       	ldd	r19, Y+4	; 0x04
    17a8:	22 30       	cpi	r18, 0x02	; 2
    17aa:	31 05       	cpc	r19, r1
    17ac:	81 f0       	breq	.+32     	; 0x17ce <GPIO_setupPortDirection+0x68>
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	9c 81       	ldd	r25, Y+4	; 0x04
    17b2:	83 30       	cpi	r24, 0x03	; 3
    17b4:	91 05       	cpc	r25, r1
    17b6:	81 f0       	breq	.+32     	; 0x17d8 <GPIO_setupPortDirection+0x72>
    17b8:	13 c0       	rjmp	.+38     	; 0x17e0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    17ba:	ea e3       	ldi	r30, 0x3A	; 58
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	80 83       	st	Z, r24
    17c2:	0e c0       	rjmp	.+28     	; 0x17e0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    17c4:	e7 e3       	ldi	r30, 0x37	; 55
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	80 83       	st	Z, r24
    17cc:	09 c0       	rjmp	.+18     	; 0x17e0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    17ce:	e4 e3       	ldi	r30, 0x34	; 52
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	80 83       	st	Z, r24
    17d6:	04 c0       	rjmp	.+8      	; 0x17e0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    17d8:	e1 e3       	ldi	r30, 0x31	; 49
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	80 83       	st	Z, r24
			break;
		}
	}
}
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <GPIO_writePort+0x6>
    17f4:	00 d0       	rcall	.+0      	; 0x17f6 <GPIO_writePort+0x8>
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    17fa:	89 83       	std	Y+1, r24	; 0x01
    17fc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	84 30       	cpi	r24, 0x04	; 4
    1802:	90 f5       	brcc	.+100    	; 0x1868 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	3c 83       	std	Y+4, r19	; 0x04
    180c:	2b 83       	std	Y+3, r18	; 0x03
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	91 05       	cpc	r25, r1
    1816:	d1 f0       	breq	.+52     	; 0x184c <GPIO_writePort+0x5e>
    1818:	2b 81       	ldd	r18, Y+3	; 0x03
    181a:	3c 81       	ldd	r19, Y+4	; 0x04
    181c:	22 30       	cpi	r18, 0x02	; 2
    181e:	31 05       	cpc	r19, r1
    1820:	2c f4       	brge	.+10     	; 0x182c <GPIO_writePort+0x3e>
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	9c 81       	ldd	r25, Y+4	; 0x04
    1826:	00 97       	sbiw	r24, 0x00	; 0
    1828:	61 f0       	breq	.+24     	; 0x1842 <GPIO_writePort+0x54>
    182a:	1e c0       	rjmp	.+60     	; 0x1868 <GPIO_writePort+0x7a>
    182c:	2b 81       	ldd	r18, Y+3	; 0x03
    182e:	3c 81       	ldd	r19, Y+4	; 0x04
    1830:	22 30       	cpi	r18, 0x02	; 2
    1832:	31 05       	cpc	r19, r1
    1834:	81 f0       	breq	.+32     	; 0x1856 <GPIO_writePort+0x68>
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	9c 81       	ldd	r25, Y+4	; 0x04
    183a:	83 30       	cpi	r24, 0x03	; 3
    183c:	91 05       	cpc	r25, r1
    183e:	81 f0       	breq	.+32     	; 0x1860 <GPIO_writePort+0x72>
    1840:	13 c0       	rjmp	.+38     	; 0x1868 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1842:	eb e3       	ldi	r30, 0x3B	; 59
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	80 83       	st	Z, r24
    184a:	0e c0       	rjmp	.+28     	; 0x1868 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    184c:	e8 e3       	ldi	r30, 0x38	; 56
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	80 83       	st	Z, r24
    1854:	09 c0       	rjmp	.+18     	; 0x1868 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1856:	e5 e3       	ldi	r30, 0x35	; 53
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	8a 81       	ldd	r24, Y+2	; 0x02
    185c:	80 83       	st	Z, r24
    185e:	04 c0       	rjmp	.+8      	; 0x1868 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1860:	e2 e3       	ldi	r30, 0x32	; 50
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	80 83       	st	Z, r24
			break;
		}
	}
}
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	00 d0       	rcall	.+0      	; 0x187c <GPIO_readPort+0x6>
    187c:	00 d0       	rcall	.+0      	; 0x187e <GPIO_readPort+0x8>
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1884:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	84 30       	cpi	r24, 0x04	; 4
    188a:	90 f5       	brcc	.+100    	; 0x18f0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	3c 83       	std	Y+4, r19	; 0x04
    1894:	2b 83       	std	Y+3, r18	; 0x03
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	9c 81       	ldd	r25, Y+4	; 0x04
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	91 05       	cpc	r25, r1
    189e:	d1 f0       	breq	.+52     	; 0x18d4 <GPIO_readPort+0x5e>
    18a0:	2b 81       	ldd	r18, Y+3	; 0x03
    18a2:	3c 81       	ldd	r19, Y+4	; 0x04
    18a4:	22 30       	cpi	r18, 0x02	; 2
    18a6:	31 05       	cpc	r19, r1
    18a8:	2c f4       	brge	.+10     	; 0x18b4 <GPIO_readPort+0x3e>
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	9c 81       	ldd	r25, Y+4	; 0x04
    18ae:	00 97       	sbiw	r24, 0x00	; 0
    18b0:	61 f0       	breq	.+24     	; 0x18ca <GPIO_readPort+0x54>
    18b2:	1e c0       	rjmp	.+60     	; 0x18f0 <GPIO_readPort+0x7a>
    18b4:	2b 81       	ldd	r18, Y+3	; 0x03
    18b6:	3c 81       	ldd	r19, Y+4	; 0x04
    18b8:	22 30       	cpi	r18, 0x02	; 2
    18ba:	31 05       	cpc	r19, r1
    18bc:	81 f0       	breq	.+32     	; 0x18de <GPIO_readPort+0x68>
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	83 30       	cpi	r24, 0x03	; 3
    18c4:	91 05       	cpc	r25, r1
    18c6:	81 f0       	breq	.+32     	; 0x18e8 <GPIO_readPort+0x72>
    18c8:	13 c0       	rjmp	.+38     	; 0x18f0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    18ca:	e9 e3       	ldi	r30, 0x39	; 57
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	89 83       	std	Y+1, r24	; 0x01
    18d2:	0e c0       	rjmp	.+28     	; 0x18f0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    18d4:	e6 e3       	ldi	r30, 0x36	; 54
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	09 c0       	rjmp	.+18     	; 0x18f0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    18de:	e3 e3       	ldi	r30, 0x33	; 51
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	04 c0       	rjmp	.+8      	; 0x18f0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    18e8:	e0 e3       	ldi	r30, 0x30	; 48
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	0f 90       	pop	r0
    18fa:	cf 91       	pop	r28
    18fc:	df 91       	pop	r29
    18fe:	08 95       	ret

00001900 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	60 97       	sbiw	r28, 0x10	; 16
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	64 e0       	ldi	r22, 0x04	; 4
    1918:	40 e0       	ldi	r20, 0x00	; 0
    191a:	0e 94 42 09 	call	0x1284	; 0x1284 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	65 e0       	ldi	r22, 0x05	; 5
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	0e 94 42 09 	call	0x1284	; 0x1284 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	66 e0       	ldi	r22, 0x06	; 6
    192c:	40 e0       	ldi	r20, 0x00	; 0
    192e:	0e 94 42 09 	call	0x1284	; 0x1284 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	67 e0       	ldi	r22, 0x07	; 7
    1936:	40 e0       	ldi	r20, 0x00	; 0
    1938:	0e 94 42 09 	call	0x1284	; 0x1284 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    193c:	83 e0       	ldi	r24, 0x03	; 3
    193e:	62 e0       	ldi	r22, 0x02	; 2
    1940:	40 e0       	ldi	r20, 0x00	; 0
    1942:	0e 94 42 09 	call	0x1284	; 0x1284 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1946:	83 e0       	ldi	r24, 0x03	; 3
    1948:	63 e0       	ldi	r22, 0x03	; 3
    194a:	40 e0       	ldi	r20, 0x00	; 0
    194c:	0e 94 42 09 	call	0x1284	; 0x1284 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1950:	83 e0       	ldi	r24, 0x03	; 3
    1952:	64 e0       	ldi	r22, 0x04	; 4
    1954:	40 e0       	ldi	r20, 0x00	; 0
    1956:	0e 94 42 09 	call	0x1284	; 0x1284 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    195a:	83 e0       	ldi	r24, 0x03	; 3
    195c:	65 e0       	ldi	r22, 0x05	; 5
    195e:	40 e0       	ldi	r20, 0x00	; 0
    1960:	0e 94 42 09 	call	0x1284	; 0x1284 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1964:	1f 86       	std	Y+15, r1	; 0x0f
    1966:	b4 c0       	rjmp	.+360    	; 0x1ad0 <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1968:	8f 85       	ldd	r24, Y+15	; 0x0f
    196a:	98 2f       	mov	r25, r24
    196c:	9c 5f       	subi	r25, 0xFC	; 252
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	69 2f       	mov	r22, r25
    1972:	41 e0       	ldi	r20, 0x01	; 1
    1974:	0e 94 42 09 	call	0x1284	; 0x1284 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1978:	8f 85       	ldd	r24, Y+15	; 0x0f
    197a:	98 2f       	mov	r25, r24
    197c:	9c 5f       	subi	r25, 0xFC	; 252
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	69 2f       	mov	r22, r25
    1982:	40 e0       	ldi	r20, 0x00	; 0
    1984:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1988:	18 8a       	std	Y+16, r1	; 0x10
    198a:	22 c0       	rjmp	.+68     	; 0x19d0 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    198c:	88 89       	ldd	r24, Y+16	; 0x10
    198e:	98 2f       	mov	r25, r24
    1990:	9e 5f       	subi	r25, 0xFE	; 254
    1992:	83 e0       	ldi	r24, 0x03	; 3
    1994:	69 2f       	mov	r22, r25
    1996:	0e 94 18 0b 	call	0x1630	; 0x1630 <GPIO_readPin>
    199a:	88 23       	and	r24, r24
    199c:	b1 f4       	brne	.+44     	; 0x19ca <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    199e:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a0:	88 2f       	mov	r24, r24
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	98 2f       	mov	r25, r24
    19ae:	88 89       	ldd	r24, Y+16	; 0x10
    19b0:	89 0f       	add	r24, r25
    19b2:	8f 5f       	subi	r24, 0xFF	; 255
    19b4:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    19b8:	60 96       	adiw	r28, 0x10	; 16
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	de bf       	out	0x3e, r29	; 62
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	cd bf       	out	0x3d, r28	; 61
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    19ca:	88 89       	ldd	r24, Y+16	; 0x10
    19cc:	8f 5f       	subi	r24, 0xFF	; 255
    19ce:	88 8b       	std	Y+16, r24	; 0x10
    19d0:	88 89       	ldd	r24, Y+16	; 0x10
    19d2:	84 30       	cpi	r24, 0x04	; 4
    19d4:	d8 f2       	brcs	.-74     	; 0x198c <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    19d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d8:	98 2f       	mov	r25, r24
    19da:	9c 5f       	subi	r25, 0xFC	; 252
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	69 2f       	mov	r22, r25
    19e0:	40 e0       	ldi	r20, 0x00	; 0
    19e2:	0e 94 42 09 	call	0x1284	; 0x1284 <GPIO_setupPinDirection>
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	a0 ea       	ldi	r26, 0xA0	; 160
    19ec:	b0 e4       	ldi	r27, 0x40	; 64
    19ee:	8b 87       	std	Y+11, r24	; 0x0b
    19f0:	9c 87       	std	Y+12, r25	; 0x0c
    19f2:	ad 87       	std	Y+13, r26	; 0x0d
    19f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    19fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	4a ef       	ldi	r20, 0xFA	; 250
    1a04:	54 e4       	ldi	r21, 0x44	; 68
    1a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	8f 83       	std	Y+7, r24	; 0x07
    1a10:	98 87       	std	Y+8, r25	; 0x08
    1a12:	a9 87       	std	Y+9, r26	; 0x09
    1a14:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a16:	6f 81       	ldd	r22, Y+7	; 0x07
    1a18:	78 85       	ldd	r23, Y+8	; 0x08
    1a1a:	89 85       	ldd	r24, Y+9	; 0x09
    1a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e8       	ldi	r20, 0x80	; 128
    1a24:	5f e3       	ldi	r21, 0x3F	; 63
    1a26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a2a:	88 23       	and	r24, r24
    1a2c:	2c f4       	brge	.+10     	; 0x1a38 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	9e 83       	std	Y+6, r25	; 0x06
    1a34:	8d 83       	std	Y+5, r24	; 0x05
    1a36:	3f c0       	rjmp	.+126    	; 0x1ab6 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1a38:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3a:	78 85       	ldd	r23, Y+8	; 0x08
    1a3c:	89 85       	ldd	r24, Y+9	; 0x09
    1a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	3f ef       	ldi	r19, 0xFF	; 255
    1a44:	4f e7       	ldi	r20, 0x7F	; 127
    1a46:	57 e4       	ldi	r21, 0x47	; 71
    1a48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a4c:	18 16       	cp	r1, r24
    1a4e:	4c f5       	brge	.+82     	; 0x1aa2 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a50:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a52:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a56:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e2       	ldi	r20, 0x20	; 32
    1a5e:	51 e4       	ldi	r21, 0x41	; 65
    1a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a64:	dc 01       	movw	r26, r24
    1a66:	cb 01       	movw	r24, r22
    1a68:	bc 01       	movw	r22, r24
    1a6a:	cd 01       	movw	r24, r26
    1a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a70:	dc 01       	movw	r26, r24
    1a72:	cb 01       	movw	r24, r22
    1a74:	9e 83       	std	Y+6, r25	; 0x06
    1a76:	8d 83       	std	Y+5, r24	; 0x05
    1a78:	0f c0       	rjmp	.+30     	; 0x1a98 <KEYPAD_getPressedKey+0x198>
    1a7a:	88 ec       	ldi	r24, 0xC8	; 200
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	9c 83       	std	Y+4, r25	; 0x04
    1a80:	8b 83       	std	Y+3, r24	; 0x03
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	9c 81       	ldd	r25, Y+4	; 0x04
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <KEYPAD_getPressedKey+0x186>
    1a8a:	9c 83       	std	Y+4, r25	; 0x04
    1a8c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a90:	9e 81       	ldd	r25, Y+6	; 0x06
    1a92:	01 97       	sbiw	r24, 0x01	; 1
    1a94:	9e 83       	std	Y+6, r25	; 0x06
    1a96:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a98:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9c:	00 97       	sbiw	r24, 0x00	; 0
    1a9e:	69 f7       	brne	.-38     	; 0x1a7a <KEYPAD_getPressedKey+0x17a>
    1aa0:	14 c0       	rjmp	.+40     	; 0x1aca <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa2:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa4:	78 85       	ldd	r23, Y+8	; 0x08
    1aa6:	89 85       	ldd	r24, Y+9	; 0x09
    1aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	9e 83       	std	Y+6, r25	; 0x06
    1ab4:	8d 83       	std	Y+5, r24	; 0x05
    1ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aba:	9a 83       	std	Y+2, r25	; 0x02
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	f1 f7       	brne	.-4      	; 0x1ac2 <KEYPAD_getPressedKey+0x1c2>
    1ac6:	9a 83       	std	Y+2, r25	; 0x02
    1ac8:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1aca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1acc:	8f 5f       	subi	r24, 0xFF	; 255
    1ace:	8f 87       	std	Y+15, r24	; 0x0f
    1ad0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ad2:	84 30       	cpi	r24, 0x04	; 4
    1ad4:	08 f4       	brcc	.+2      	; 0x1ad8 <KEYPAD_getPressedKey+0x1d8>
    1ad6:	48 cf       	rjmp	.-368    	; 0x1968 <KEYPAD_getPressedKey+0x68>
    1ad8:	45 cf       	rjmp	.-374    	; 0x1964 <KEYPAD_getPressedKey+0x64>

00001ada <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1ae8:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	3c 83       	std	Y+4, r19	; 0x04
    1af2:	2b 83       	std	Y+3, r18	; 0x03
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	88 30       	cpi	r24, 0x08	; 8
    1afa:	91 05       	cpc	r25, r1
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1afe:	70 c0       	rjmp	.+224    	; 0x1be0 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1b00:	2b 81       	ldd	r18, Y+3	; 0x03
    1b02:	3c 81       	ldd	r19, Y+4	; 0x04
    1b04:	29 30       	cpi	r18, 0x09	; 9
    1b06:	31 05       	cpc	r19, r1
    1b08:	5c f5       	brge	.+86     	; 0x1b60 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	84 30       	cpi	r24, 0x04	; 4
    1b10:	91 05       	cpc	r25, r1
    1b12:	09 f4       	brne	.+2      	; 0x1b16 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1b14:	59 c0       	rjmp	.+178    	; 0x1bc8 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1b16:	2b 81       	ldd	r18, Y+3	; 0x03
    1b18:	3c 81       	ldd	r19, Y+4	; 0x04
    1b1a:	25 30       	cpi	r18, 0x05	; 5
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	9c f4       	brge	.+38     	; 0x1b46 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	9c 81       	ldd	r25, Y+4	; 0x04
    1b24:	82 30       	cpi	r24, 0x02	; 2
    1b26:	91 05       	cpc	r25, r1
    1b28:	09 f4       	brne	.+2      	; 0x1b2c <KEYPAD_4x4_adjustKeyNumber+0x52>
    1b2a:	48 c0       	rjmp	.+144    	; 0x1bbc <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1b2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b30:	23 30       	cpi	r18, 0x03	; 3
    1b32:	31 05       	cpc	r19, r1
    1b34:	0c f0       	brlt	.+2      	; 0x1b38 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1b36:	45 c0       	rjmp	.+138    	; 0x1bc2 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	91 05       	cpc	r25, r1
    1b40:	09 f4       	brne	.+2      	; 0x1b44 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1b42:	39 c0       	rjmp	.+114    	; 0x1bb6 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1b44:	67 c0       	rjmp	.+206    	; 0x1c14 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1b46:	2b 81       	ldd	r18, Y+3	; 0x03
    1b48:	3c 81       	ldd	r19, Y+4	; 0x04
    1b4a:	26 30       	cpi	r18, 0x06	; 6
    1b4c:	31 05       	cpc	r19, r1
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1b50:	41 c0       	rjmp	.+130    	; 0x1bd4 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	9c 81       	ldd	r25, Y+4	; 0x04
    1b56:	87 30       	cpi	r24, 0x07	; 7
    1b58:	91 05       	cpc	r25, r1
    1b5a:	0c f0       	brlt	.+2      	; 0x1b5e <KEYPAD_4x4_adjustKeyNumber+0x84>
    1b5c:	3e c0       	rjmp	.+124    	; 0x1bda <KEYPAD_4x4_adjustKeyNumber+0x100>
    1b5e:	37 c0       	rjmp	.+110    	; 0x1bce <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1b60:	2b 81       	ldd	r18, Y+3	; 0x03
    1b62:	3c 81       	ldd	r19, Y+4	; 0x04
    1b64:	2c 30       	cpi	r18, 0x0C	; 12
    1b66:	31 05       	cpc	r19, r1
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <KEYPAD_4x4_adjustKeyNumber+0x92>
    1b6a:	46 c0       	rjmp	.+140    	; 0x1bf8 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b70:	8d 30       	cpi	r24, 0x0D	; 13
    1b72:	91 05       	cpc	r25, r1
    1b74:	5c f4       	brge	.+22     	; 0x1b8c <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1b76:	2b 81       	ldd	r18, Y+3	; 0x03
    1b78:	3c 81       	ldd	r19, Y+4	; 0x04
    1b7a:	2a 30       	cpi	r18, 0x0A	; 10
    1b7c:	31 05       	cpc	r19, r1
    1b7e:	b1 f1       	breq	.+108    	; 0x1bec <KEYPAD_4x4_adjustKeyNumber+0x112>
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	9c 81       	ldd	r25, Y+4	; 0x04
    1b84:	8b 30       	cpi	r24, 0x0B	; 11
    1b86:	91 05       	cpc	r25, r1
    1b88:	a4 f5       	brge	.+104    	; 0x1bf2 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1b8a:	2d c0       	rjmp	.+90     	; 0x1be6 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1b8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b90:	2e 30       	cpi	r18, 0x0E	; 14
    1b92:	31 05       	cpc	r19, r1
    1b94:	b9 f1       	breq	.+110    	; 0x1c04 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9a:	8e 30       	cpi	r24, 0x0E	; 14
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	7c f1       	brlt	.+94     	; 0x1bfe <KEYPAD_4x4_adjustKeyNumber+0x124>
    1ba0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba4:	2f 30       	cpi	r18, 0x0F	; 15
    1ba6:	31 05       	cpc	r19, r1
    1ba8:	79 f1       	breq	.+94     	; 0x1c08 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1baa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bac:	9c 81       	ldd	r25, Y+4	; 0x04
    1bae:	80 31       	cpi	r24, 0x10	; 16
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	69 f1       	breq	.+90     	; 0x1c0e <KEYPAD_4x4_adjustKeyNumber+0x134>
    1bb4:	2f c0       	rjmp	.+94     	; 0x1c14 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1bb6:	87 e0       	ldi	r24, 0x07	; 7
    1bb8:	89 83       	std	Y+1, r24	; 0x01
    1bba:	2e c0       	rjmp	.+92     	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1bbc:	88 e0       	ldi	r24, 0x08	; 8
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	2b c0       	rjmp	.+86     	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1bc2:	89 e0       	ldi	r24, 0x09	; 9
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	28 c0       	rjmp	.+80     	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1bc8:	85 e2       	ldi	r24, 0x25	; 37
    1bca:	89 83       	std	Y+1, r24	; 0x01
    1bcc:	25 c0       	rjmp	.+74     	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1bce:	84 e0       	ldi	r24, 0x04	; 4
    1bd0:	89 83       	std	Y+1, r24	; 0x01
    1bd2:	22 c0       	rjmp	.+68     	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1bd4:	85 e0       	ldi	r24, 0x05	; 5
    1bd6:	89 83       	std	Y+1, r24	; 0x01
    1bd8:	1f c0       	rjmp	.+62     	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1bda:	86 e0       	ldi	r24, 0x06	; 6
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	1c c0       	rjmp	.+56     	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1be0:	8a e2       	ldi	r24, 0x2A	; 42
    1be2:	89 83       	std	Y+1, r24	; 0x01
    1be4:	19 c0       	rjmp	.+50     	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	16 c0       	rjmp	.+44     	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1bec:	82 e0       	ldi	r24, 0x02	; 2
    1bee:	89 83       	std	Y+1, r24	; 0x01
    1bf0:	13 c0       	rjmp	.+38     	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1bf2:	83 e0       	ldi	r24, 0x03	; 3
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	10 c0       	rjmp	.+32     	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1bf8:	8d e2       	ldi	r24, 0x2D	; 45
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	0d c0       	rjmp	.+26     	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1bfe:	8d e0       	ldi	r24, 0x0D	; 13
    1c00:	89 83       	std	Y+1, r24	; 0x01
    1c02:	0a c0       	rjmp	.+20     	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1c04:	19 82       	std	Y+1, r1	; 0x01
    1c06:	08 c0       	rjmp	.+16     	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1c08:	8d e3       	ldi	r24, 0x3D	; 61
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    1c0c:	05 c0       	rjmp	.+10     	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1c0e:	8b e2       	ldi	r24, 0x2B	; 43
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	2e 97       	sbiw	r28, 0x0e	; 14
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	de bf       	out	0x3e, r29	; 62
    1c38:	0f be       	out	0x3f, r0	; 63
    1c3a:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	61 e0       	ldi	r22, 0x01	; 1
    1c40:	41 e0       	ldi	r20, 0x01	; 1
    1c42:	0e 94 42 09 	call	0x1284	; 0x1284 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	62 e0       	ldi	r22, 0x02	; 2
    1c4a:	41 e0       	ldi	r20, 0x01	; 1
    1c4c:	0e 94 42 09 	call	0x1284	; 0x1284 <GPIO_setupPinDirection>
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	a0 ea       	ldi	r26, 0xA0	; 160
    1c56:	b1 e4       	ldi	r27, 0x41	; 65
    1c58:	8b 87       	std	Y+11, r24	; 0x0b
    1c5a:	9c 87       	std	Y+12, r25	; 0x0c
    1c5c:	ad 87       	std	Y+13, r26	; 0x0d
    1c5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	4a ef       	ldi	r20, 0xFA	; 250
    1c6e:	54 e4       	ldi	r21, 0x44	; 68
    1c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	8f 83       	std	Y+7, r24	; 0x07
    1c7a:	98 87       	std	Y+8, r25	; 0x08
    1c7c:	a9 87       	std	Y+9, r26	; 0x09
    1c7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c80:	6f 81       	ldd	r22, Y+7	; 0x07
    1c82:	78 85       	ldd	r23, Y+8	; 0x08
    1c84:	89 85       	ldd	r24, Y+9	; 0x09
    1c86:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e8       	ldi	r20, 0x80	; 128
    1c8e:	5f e3       	ldi	r21, 0x3F	; 63
    1c90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c94:	88 23       	and	r24, r24
    1c96:	2c f4       	brge	.+10     	; 0x1ca2 <LCD_init+0x7a>
		__ticks = 1;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	9e 83       	std	Y+6, r25	; 0x06
    1c9e:	8d 83       	std	Y+5, r24	; 0x05
    1ca0:	3f c0       	rjmp	.+126    	; 0x1d20 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1ca2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca4:	78 85       	ldd	r23, Y+8	; 0x08
    1ca6:	89 85       	ldd	r24, Y+9	; 0x09
    1ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	3f ef       	ldi	r19, 0xFF	; 255
    1cae:	4f e7       	ldi	r20, 0x7F	; 127
    1cb0:	57 e4       	ldi	r21, 0x47	; 71
    1cb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb6:	18 16       	cp	r1, r24
    1cb8:	4c f5       	brge	.+82     	; 0x1d0c <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cba:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e2       	ldi	r20, 0x20	; 32
    1cc8:	51 e4       	ldi	r21, 0x41	; 65
    1cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	bc 01       	movw	r22, r24
    1cd4:	cd 01       	movw	r24, r26
    1cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9e 83       	std	Y+6, r25	; 0x06
    1ce0:	8d 83       	std	Y+5, r24	; 0x05
    1ce2:	0f c0       	rjmp	.+30     	; 0x1d02 <LCD_init+0xda>
    1ce4:	88 ec       	ldi	r24, 0xC8	; 200
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9c 83       	std	Y+4, r25	; 0x04
    1cea:	8b 83       	std	Y+3, r24	; 0x03
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <LCD_init+0xc8>
    1cf4:	9c 83       	std	Y+4, r25	; 0x04
    1cf6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	9e 83       	std	Y+6, r25	; 0x06
    1d00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d02:	8d 81       	ldd	r24, Y+5	; 0x05
    1d04:	9e 81       	ldd	r25, Y+6	; 0x06
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	69 f7       	brne	.-38     	; 0x1ce4 <LCD_init+0xbc>
    1d0a:	14 c0       	rjmp	.+40     	; 0x1d34 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d0e:	78 85       	ldd	r23, Y+8	; 0x08
    1d10:	89 85       	ldd	r24, Y+9	; 0x09
    1d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9e 83       	std	Y+6, r25	; 0x06
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	9e 81       	ldd	r25, Y+6	; 0x06
    1d24:	9a 83       	std	Y+2, r25	; 0x02
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <LCD_init+0x104>
    1d30:	9a 83       	std	Y+2, r25	; 0x02
    1d32:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	63 e0       	ldi	r22, 0x03	; 3
    1d38:	41 e0       	ldi	r20, 0x01	; 1
    1d3a:	0e 94 42 09 	call	0x1284	; 0x1284 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	64 e0       	ldi	r22, 0x04	; 4
    1d42:	41 e0       	ldi	r20, 0x01	; 1
    1d44:	0e 94 42 09 	call	0x1284	; 0x1284 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	65 e0       	ldi	r22, 0x05	; 5
    1d4c:	41 e0       	ldi	r20, 0x01	; 1
    1d4e:	0e 94 42 09 	call	0x1284	; 0x1284 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	66 e0       	ldi	r22, 0x06	; 6
    1d56:	41 e0       	ldi	r20, 0x01	; 1
    1d58:	0e 94 42 09 	call	0x1284	; 0x1284 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1d5c:	83 e3       	ldi	r24, 0x33	; 51
    1d5e:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1d62:	82 e3       	ldi	r24, 0x32	; 50
    1d64:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1d68:	88 e2       	ldi	r24, 0x28	; 40
    1d6a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1d6e:	8c e0       	ldi	r24, 0x0C	; 12
    1d70:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
}
    1d7a:	2e 96       	adiw	r28, 0x0e	; 14
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1d8c:	0f 93       	push	r16
    1d8e:	1f 93       	push	r17
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	c3 56       	subi	r28, 0x63	; 99
    1d9a:	d0 40       	sbci	r29, 0x00	; 0
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	fe 01       	movw	r30, r28
    1da8:	ed 59       	subi	r30, 0x9D	; 157
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	61 e0       	ldi	r22, 0x01	; 1
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
    1db8:	fe 01       	movw	r30, r28
    1dba:	e1 5a       	subi	r30, 0xA1	; 161
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	a0 e8       	ldi	r26, 0x80	; 128
    1dc4:	bf e3       	ldi	r27, 0x3F	; 63
    1dc6:	80 83       	st	Z, r24
    1dc8:	91 83       	std	Z+1, r25	; 0x01
    1dca:	a2 83       	std	Z+2, r26	; 0x02
    1dcc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dce:	8e 01       	movw	r16, r28
    1dd0:	05 5a       	subi	r16, 0xA5	; 165
    1dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	e1 5a       	subi	r30, 0xA1	; 161
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	60 81       	ld	r22, Z
    1ddc:	71 81       	ldd	r23, Z+1	; 0x01
    1dde:	82 81       	ldd	r24, Z+2	; 0x02
    1de0:	93 81       	ldd	r25, Z+3	; 0x03
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	4a ef       	ldi	r20, 0xFA	; 250
    1de8:	54 e4       	ldi	r21, 0x44	; 68
    1dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	f8 01       	movw	r30, r16
    1df4:	80 83       	st	Z, r24
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	a2 83       	std	Z+2, r26	; 0x02
    1dfa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	e5 5a       	subi	r30, 0xA5	; 165
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	60 81       	ld	r22, Z
    1e04:	71 81       	ldd	r23, Z+1	; 0x01
    1e06:	82 81       	ldd	r24, Z+2	; 0x02
    1e08:	93 81       	ldd	r25, Z+3	; 0x03
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e8       	ldi	r20, 0x80	; 128
    1e10:	5f e3       	ldi	r21, 0x3F	; 63
    1e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e16:	88 23       	and	r24, r24
    1e18:	44 f4       	brge	.+16     	; 0x1e2a <LCD_sendCommand+0x9e>
		__ticks = 1;
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e7 5a       	subi	r30, 0xA7	; 167
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	91 83       	std	Z+1, r25	; 0x01
    1e26:	80 83       	st	Z, r24
    1e28:	64 c0       	rjmp	.+200    	; 0x1ef2 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e5 5a       	subi	r30, 0xA5	; 165
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	60 81       	ld	r22, Z
    1e32:	71 81       	ldd	r23, Z+1	; 0x01
    1e34:	82 81       	ldd	r24, Z+2	; 0x02
    1e36:	93 81       	ldd	r25, Z+3	; 0x03
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	3f ef       	ldi	r19, 0xFF	; 255
    1e3c:	4f e7       	ldi	r20, 0x7F	; 127
    1e3e:	57 e4       	ldi	r21, 0x47	; 71
    1e40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e44:	18 16       	cp	r1, r24
    1e46:	0c f0       	brlt	.+2      	; 0x1e4a <LCD_sendCommand+0xbe>
    1e48:	43 c0       	rjmp	.+134    	; 0x1ed0 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	e1 5a       	subi	r30, 0xA1	; 161
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	60 81       	ld	r22, Z
    1e52:	71 81       	ldd	r23, Z+1	; 0x01
    1e54:	82 81       	ldd	r24, Z+2	; 0x02
    1e56:	93 81       	ldd	r25, Z+3	; 0x03
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e2       	ldi	r20, 0x20	; 32
    1e5e:	51 e4       	ldi	r21, 0x41	; 65
    1e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	8e 01       	movw	r16, r28
    1e6a:	07 5a       	subi	r16, 0xA7	; 167
    1e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6e:	bc 01       	movw	r22, r24
    1e70:	cd 01       	movw	r24, r26
    1e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	f8 01       	movw	r30, r16
    1e7c:	91 83       	std	Z+1, r25	; 0x01
    1e7e:	80 83       	st	Z, r24
    1e80:	1f c0       	rjmp	.+62     	; 0x1ec0 <LCD_sendCommand+0x134>
    1e82:	fe 01       	movw	r30, r28
    1e84:	e9 5a       	subi	r30, 0xA9	; 169
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	88 ec       	ldi	r24, 0xC8	; 200
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	91 83       	std	Z+1, r25	; 0x01
    1e8e:	80 83       	st	Z, r24
    1e90:	fe 01       	movw	r30, r28
    1e92:	e9 5a       	subi	r30, 0xA9	; 169
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	80 81       	ld	r24, Z
    1e98:	91 81       	ldd	r25, Z+1	; 0x01
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <LCD_sendCommand+0x10e>
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e9 5a       	subi	r30, 0xA9	; 169
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	91 83       	std	Z+1, r25	; 0x01
    1ea6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ea8:	de 01       	movw	r26, r28
    1eaa:	a7 5a       	subi	r26, 0xA7	; 167
    1eac:	bf 4f       	sbci	r27, 0xFF	; 255
    1eae:	fe 01       	movw	r30, r28
    1eb0:	e7 5a       	subi	r30, 0xA7	; 167
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	80 81       	ld	r24, Z
    1eb6:	91 81       	ldd	r25, Z+1	; 0x01
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	11 96       	adiw	r26, 0x01	; 1
    1ebc:	9c 93       	st	X, r25
    1ebe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	e7 5a       	subi	r30, 0xA7	; 167
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	80 81       	ld	r24, Z
    1ec8:	91 81       	ldd	r25, Z+1	; 0x01
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	d1 f6       	brne	.-76     	; 0x1e82 <LCD_sendCommand+0xf6>
    1ece:	27 c0       	rjmp	.+78     	; 0x1f1e <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed0:	8e 01       	movw	r16, r28
    1ed2:	07 5a       	subi	r16, 0xA7	; 167
    1ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e5 5a       	subi	r30, 0xA5	; 165
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	f8 01       	movw	r30, r16
    1eee:	91 83       	std	Z+1, r25	; 0x01
    1ef0:	80 83       	st	Z, r24
    1ef2:	de 01       	movw	r26, r28
    1ef4:	ab 5a       	subi	r26, 0xAB	; 171
    1ef6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ef8:	fe 01       	movw	r30, r28
    1efa:	e7 5a       	subi	r30, 0xA7	; 167
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	80 81       	ld	r24, Z
    1f00:	91 81       	ldd	r25, Z+1	; 0x01
    1f02:	8d 93       	st	X+, r24
    1f04:	9c 93       	st	X, r25
    1f06:	fe 01       	movw	r30, r28
    1f08:	eb 5a       	subi	r30, 0xAB	; 171
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	80 81       	ld	r24, Z
    1f0e:	91 81       	ldd	r25, Z+1	; 0x01
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	f1 f7       	brne	.-4      	; 0x1f10 <LCD_sendCommand+0x184>
    1f14:	fe 01       	movw	r30, r28
    1f16:	eb 5a       	subi	r30, 0xAB	; 171
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	91 83       	std	Z+1, r25	; 0x01
    1f1c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	62 e0       	ldi	r22, 0x02	; 2
    1f22:	41 e0       	ldi	r20, 0x01	; 1
    1f24:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
    1f28:	fe 01       	movw	r30, r28
    1f2a:	ef 5a       	subi	r30, 0xAF	; 175
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	a0 e8       	ldi	r26, 0x80	; 128
    1f34:	bf e3       	ldi	r27, 0x3F	; 63
    1f36:	80 83       	st	Z, r24
    1f38:	91 83       	std	Z+1, r25	; 0x01
    1f3a:	a2 83       	std	Z+2, r26	; 0x02
    1f3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3e:	8e 01       	movw	r16, r28
    1f40:	03 5b       	subi	r16, 0xB3	; 179
    1f42:	1f 4f       	sbci	r17, 0xFF	; 255
    1f44:	fe 01       	movw	r30, r28
    1f46:	ef 5a       	subi	r30, 0xAF	; 175
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	60 81       	ld	r22, Z
    1f4c:	71 81       	ldd	r23, Z+1	; 0x01
    1f4e:	82 81       	ldd	r24, Z+2	; 0x02
    1f50:	93 81       	ldd	r25, Z+3	; 0x03
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	4a ef       	ldi	r20, 0xFA	; 250
    1f58:	54 e4       	ldi	r21, 0x44	; 68
    1f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	f8 01       	movw	r30, r16
    1f64:	80 83       	st	Z, r24
    1f66:	91 83       	std	Z+1, r25	; 0x01
    1f68:	a2 83       	std	Z+2, r26	; 0x02
    1f6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	e3 5b       	subi	r30, 0xB3	; 179
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	60 81       	ld	r22, Z
    1f74:	71 81       	ldd	r23, Z+1	; 0x01
    1f76:	82 81       	ldd	r24, Z+2	; 0x02
    1f78:	93 81       	ldd	r25, Z+3	; 0x03
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e8       	ldi	r20, 0x80	; 128
    1f80:	5f e3       	ldi	r21, 0x3F	; 63
    1f82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f86:	88 23       	and	r24, r24
    1f88:	44 f4       	brge	.+16     	; 0x1f9a <LCD_sendCommand+0x20e>
		__ticks = 1;
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	e5 5b       	subi	r30, 0xB5	; 181
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	91 83       	std	Z+1, r25	; 0x01
    1f96:	80 83       	st	Z, r24
    1f98:	64 c0       	rjmp	.+200    	; 0x2062 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	e3 5b       	subi	r30, 0xB3	; 179
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	60 81       	ld	r22, Z
    1fa2:	71 81       	ldd	r23, Z+1	; 0x01
    1fa4:	82 81       	ldd	r24, Z+2	; 0x02
    1fa6:	93 81       	ldd	r25, Z+3	; 0x03
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	3f ef       	ldi	r19, 0xFF	; 255
    1fac:	4f e7       	ldi	r20, 0x7F	; 127
    1fae:	57 e4       	ldi	r21, 0x47	; 71
    1fb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb4:	18 16       	cp	r1, r24
    1fb6:	0c f0       	brlt	.+2      	; 0x1fba <LCD_sendCommand+0x22e>
    1fb8:	43 c0       	rjmp	.+134    	; 0x2040 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fba:	fe 01       	movw	r30, r28
    1fbc:	ef 5a       	subi	r30, 0xAF	; 175
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	60 81       	ld	r22, Z
    1fc2:	71 81       	ldd	r23, Z+1	; 0x01
    1fc4:	82 81       	ldd	r24, Z+2	; 0x02
    1fc6:	93 81       	ldd	r25, Z+3	; 0x03
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	40 e2       	ldi	r20, 0x20	; 32
    1fce:	51 e4       	ldi	r21, 0x41	; 65
    1fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	8e 01       	movw	r16, r28
    1fda:	05 5b       	subi	r16, 0xB5	; 181
    1fdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fde:	bc 01       	movw	r22, r24
    1fe0:	cd 01       	movw	r24, r26
    1fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	f8 01       	movw	r30, r16
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	80 83       	st	Z, r24
    1ff0:	1f c0       	rjmp	.+62     	; 0x2030 <LCD_sendCommand+0x2a4>
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e7 5b       	subi	r30, 0xB7	; 183
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	88 ec       	ldi	r24, 0xC8	; 200
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	91 83       	std	Z+1, r25	; 0x01
    1ffe:	80 83       	st	Z, r24
    2000:	fe 01       	movw	r30, r28
    2002:	e7 5b       	subi	r30, 0xB7	; 183
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	80 81       	ld	r24, Z
    2008:	91 81       	ldd	r25, Z+1	; 0x01
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <LCD_sendCommand+0x27e>
    200e:	fe 01       	movw	r30, r28
    2010:	e7 5b       	subi	r30, 0xB7	; 183
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	91 83       	std	Z+1, r25	; 0x01
    2016:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2018:	de 01       	movw	r26, r28
    201a:	a5 5b       	subi	r26, 0xB5	; 181
    201c:	bf 4f       	sbci	r27, 0xFF	; 255
    201e:	fe 01       	movw	r30, r28
    2020:	e5 5b       	subi	r30, 0xB5	; 181
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	80 81       	ld	r24, Z
    2026:	91 81       	ldd	r25, Z+1	; 0x01
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	11 96       	adiw	r26, 0x01	; 1
    202c:	9c 93       	st	X, r25
    202e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2030:	fe 01       	movw	r30, r28
    2032:	e5 5b       	subi	r30, 0xB5	; 181
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	80 81       	ld	r24, Z
    2038:	91 81       	ldd	r25, Z+1	; 0x01
    203a:	00 97       	sbiw	r24, 0x00	; 0
    203c:	d1 f6       	brne	.-76     	; 0x1ff2 <LCD_sendCommand+0x266>
    203e:	27 c0       	rjmp	.+78     	; 0x208e <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2040:	8e 01       	movw	r16, r28
    2042:	05 5b       	subi	r16, 0xB5	; 181
    2044:	1f 4f       	sbci	r17, 0xFF	; 255
    2046:	fe 01       	movw	r30, r28
    2048:	e3 5b       	subi	r30, 0xB3	; 179
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	60 81       	ld	r22, Z
    204e:	71 81       	ldd	r23, Z+1	; 0x01
    2050:	82 81       	ldd	r24, Z+2	; 0x02
    2052:	93 81       	ldd	r25, Z+3	; 0x03
    2054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	f8 01       	movw	r30, r16
    205e:	91 83       	std	Z+1, r25	; 0x01
    2060:	80 83       	st	Z, r24
    2062:	de 01       	movw	r26, r28
    2064:	a9 5b       	subi	r26, 0xB9	; 185
    2066:	bf 4f       	sbci	r27, 0xFF	; 255
    2068:	fe 01       	movw	r30, r28
    206a:	e5 5b       	subi	r30, 0xB5	; 181
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	80 81       	ld	r24, Z
    2070:	91 81       	ldd	r25, Z+1	; 0x01
    2072:	8d 93       	st	X+, r24
    2074:	9c 93       	st	X, r25
    2076:	fe 01       	movw	r30, r28
    2078:	e9 5b       	subi	r30, 0xB9	; 185
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	80 81       	ld	r24, Z
    207e:	91 81       	ldd	r25, Z+1	; 0x01
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <LCD_sendCommand+0x2f4>
    2084:	fe 01       	movw	r30, r28
    2086:	e9 5b       	subi	r30, 0xB9	; 185
    2088:	ff 4f       	sbci	r31, 0xFF	; 255
    208a:	91 83       	std	Z+1, r25	; 0x01
    208c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    208e:	fe 01       	movw	r30, r28
    2090:	ed 59       	subi	r30, 0x9D	; 157
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	80 81       	ld	r24, Z
    2096:	88 2f       	mov	r24, r24
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	80 71       	andi	r24, 0x10	; 16
    209c:	90 70       	andi	r25, 0x00	; 0
    209e:	95 95       	asr	r25
    20a0:	87 95       	ror	r24
    20a2:	95 95       	asr	r25
    20a4:	87 95       	ror	r24
    20a6:	95 95       	asr	r25
    20a8:	87 95       	ror	r24
    20aa:	95 95       	asr	r25
    20ac:	87 95       	ror	r24
    20ae:	98 2f       	mov	r25, r24
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	63 e0       	ldi	r22, 0x03	; 3
    20b4:	49 2f       	mov	r20, r25
    20b6:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    20ba:	fe 01       	movw	r30, r28
    20bc:	ed 59       	subi	r30, 0x9D	; 157
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	80 81       	ld	r24, Z
    20c2:	88 2f       	mov	r24, r24
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	80 72       	andi	r24, 0x20	; 32
    20c8:	90 70       	andi	r25, 0x00	; 0
    20ca:	95 95       	asr	r25
    20cc:	87 95       	ror	r24
    20ce:	95 95       	asr	r25
    20d0:	87 95       	ror	r24
    20d2:	95 95       	asr	r25
    20d4:	87 95       	ror	r24
    20d6:	95 95       	asr	r25
    20d8:	87 95       	ror	r24
    20da:	95 95       	asr	r25
    20dc:	87 95       	ror	r24
    20de:	98 2f       	mov	r25, r24
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	64 e0       	ldi	r22, 0x04	; 4
    20e4:	49 2f       	mov	r20, r25
    20e6:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    20ea:	fe 01       	movw	r30, r28
    20ec:	ed 59       	subi	r30, 0x9D	; 157
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	80 81       	ld	r24, Z
    20f2:	88 2f       	mov	r24, r24
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	80 74       	andi	r24, 0x40	; 64
    20f8:	90 70       	andi	r25, 0x00	; 0
    20fa:	08 2e       	mov	r0, r24
    20fc:	89 2f       	mov	r24, r25
    20fe:	00 0c       	add	r0, r0
    2100:	88 1f       	adc	r24, r24
    2102:	99 0b       	sbc	r25, r25
    2104:	00 0c       	add	r0, r0
    2106:	88 1f       	adc	r24, r24
    2108:	99 1f       	adc	r25, r25
    210a:	98 2f       	mov	r25, r24
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	65 e0       	ldi	r22, 0x05	; 5
    2110:	49 2f       	mov	r20, r25
    2112:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2116:	fe 01       	movw	r30, r28
    2118:	ed 59       	subi	r30, 0x9D	; 157
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	80 81       	ld	r24, Z
    211e:	98 2f       	mov	r25, r24
    2120:	99 1f       	adc	r25, r25
    2122:	99 27       	eor	r25, r25
    2124:	99 1f       	adc	r25, r25
    2126:	80 e0       	ldi	r24, 0x00	; 0
    2128:	66 e0       	ldi	r22, 0x06	; 6
    212a:	49 2f       	mov	r20, r25
    212c:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
    2130:	fe 01       	movw	r30, r28
    2132:	ed 5b       	subi	r30, 0xBD	; 189
    2134:	ff 4f       	sbci	r31, 0xFF	; 255
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	a0 e8       	ldi	r26, 0x80	; 128
    213c:	bf e3       	ldi	r27, 0x3F	; 63
    213e:	80 83       	st	Z, r24
    2140:	91 83       	std	Z+1, r25	; 0x01
    2142:	a2 83       	std	Z+2, r26	; 0x02
    2144:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2146:	8e 01       	movw	r16, r28
    2148:	01 5c       	subi	r16, 0xC1	; 193
    214a:	1f 4f       	sbci	r17, 0xFF	; 255
    214c:	fe 01       	movw	r30, r28
    214e:	ed 5b       	subi	r30, 0xBD	; 189
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	60 81       	ld	r22, Z
    2154:	71 81       	ldd	r23, Z+1	; 0x01
    2156:	82 81       	ldd	r24, Z+2	; 0x02
    2158:	93 81       	ldd	r25, Z+3	; 0x03
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	4a ef       	ldi	r20, 0xFA	; 250
    2160:	54 e4       	ldi	r21, 0x44	; 68
    2162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	f8 01       	movw	r30, r16
    216c:	80 83       	st	Z, r24
    216e:	91 83       	std	Z+1, r25	; 0x01
    2170:	a2 83       	std	Z+2, r26	; 0x02
    2172:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2174:	fe 01       	movw	r30, r28
    2176:	ff 96       	adiw	r30, 0x3f	; 63
    2178:	60 81       	ld	r22, Z
    217a:	71 81       	ldd	r23, Z+1	; 0x01
    217c:	82 81       	ldd	r24, Z+2	; 0x02
    217e:	93 81       	ldd	r25, Z+3	; 0x03
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e8       	ldi	r20, 0x80	; 128
    2186:	5f e3       	ldi	r21, 0x3F	; 63
    2188:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    218c:	88 23       	and	r24, r24
    218e:	2c f4       	brge	.+10     	; 0x219a <LCD_sendCommand+0x40e>
		__ticks = 1;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	9e af       	std	Y+62, r25	; 0x3e
    2196:	8d af       	std	Y+61, r24	; 0x3d
    2198:	46 c0       	rjmp	.+140    	; 0x2226 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    219a:	fe 01       	movw	r30, r28
    219c:	ff 96       	adiw	r30, 0x3f	; 63
    219e:	60 81       	ld	r22, Z
    21a0:	71 81       	ldd	r23, Z+1	; 0x01
    21a2:	82 81       	ldd	r24, Z+2	; 0x02
    21a4:	93 81       	ldd	r25, Z+3	; 0x03
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	3f ef       	ldi	r19, 0xFF	; 255
    21aa:	4f e7       	ldi	r20, 0x7F	; 127
    21ac:	57 e4       	ldi	r21, 0x47	; 71
    21ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21b2:	18 16       	cp	r1, r24
    21b4:	64 f5       	brge	.+88     	; 0x220e <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b6:	fe 01       	movw	r30, r28
    21b8:	ed 5b       	subi	r30, 0xBD	; 189
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	60 81       	ld	r22, Z
    21be:	71 81       	ldd	r23, Z+1	; 0x01
    21c0:	82 81       	ldd	r24, Z+2	; 0x02
    21c2:	93 81       	ldd	r25, Z+3	; 0x03
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e2       	ldi	r20, 0x20	; 32
    21ca:	51 e4       	ldi	r21, 0x41	; 65
    21cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	bc 01       	movw	r22, r24
    21d6:	cd 01       	movw	r24, r26
    21d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	9e af       	std	Y+62, r25	; 0x3e
    21e2:	8d af       	std	Y+61, r24	; 0x3d
    21e4:	0f c0       	rjmp	.+30     	; 0x2204 <LCD_sendCommand+0x478>
    21e6:	88 ec       	ldi	r24, 0xC8	; 200
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	9c af       	std	Y+60, r25	; 0x3c
    21ec:	8b af       	std	Y+59, r24	; 0x3b
    21ee:	8b ad       	ldd	r24, Y+59	; 0x3b
    21f0:	9c ad       	ldd	r25, Y+60	; 0x3c
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	f1 f7       	brne	.-4      	; 0x21f2 <LCD_sendCommand+0x466>
    21f6:	9c af       	std	Y+60, r25	; 0x3c
    21f8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    21fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	9e af       	std	Y+62, r25	; 0x3e
    2202:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2204:	8d ad       	ldd	r24, Y+61	; 0x3d
    2206:	9e ad       	ldd	r25, Y+62	; 0x3e
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	69 f7       	brne	.-38     	; 0x21e6 <LCD_sendCommand+0x45a>
    220c:	16 c0       	rjmp	.+44     	; 0x223a <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220e:	fe 01       	movw	r30, r28
    2210:	ff 96       	adiw	r30, 0x3f	; 63
    2212:	60 81       	ld	r22, Z
    2214:	71 81       	ldd	r23, Z+1	; 0x01
    2216:	82 81       	ldd	r24, Z+2	; 0x02
    2218:	93 81       	ldd	r25, Z+3	; 0x03
    221a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	9e af       	std	Y+62, r25	; 0x3e
    2224:	8d af       	std	Y+61, r24	; 0x3d
    2226:	8d ad       	ldd	r24, Y+61	; 0x3d
    2228:	9e ad       	ldd	r25, Y+62	; 0x3e
    222a:	9a af       	std	Y+58, r25	; 0x3a
    222c:	89 af       	std	Y+57, r24	; 0x39
    222e:	89 ad       	ldd	r24, Y+57	; 0x39
    2230:	9a ad       	ldd	r25, Y+58	; 0x3a
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	f1 f7       	brne	.-4      	; 0x2232 <LCD_sendCommand+0x4a6>
    2236:	9a af       	std	Y+58, r25	; 0x3a
    2238:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    223a:	80 e0       	ldi	r24, 0x00	; 0
    223c:	62 e0       	ldi	r22, 0x02	; 2
    223e:	40 e0       	ldi	r20, 0x00	; 0
    2240:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
    2244:	80 e0       	ldi	r24, 0x00	; 0
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	a0 e8       	ldi	r26, 0x80	; 128
    224a:	bf e3       	ldi	r27, 0x3F	; 63
    224c:	8d ab       	std	Y+53, r24	; 0x35
    224e:	9e ab       	std	Y+54, r25	; 0x36
    2250:	af ab       	std	Y+55, r26	; 0x37
    2252:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2254:	6d a9       	ldd	r22, Y+53	; 0x35
    2256:	7e a9       	ldd	r23, Y+54	; 0x36
    2258:	8f a9       	ldd	r24, Y+55	; 0x37
    225a:	98 ad       	ldd	r25, Y+56	; 0x38
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	4a ef       	ldi	r20, 0xFA	; 250
    2262:	54 e4       	ldi	r21, 0x44	; 68
    2264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	89 ab       	std	Y+49, r24	; 0x31
    226e:	9a ab       	std	Y+50, r25	; 0x32
    2270:	ab ab       	std	Y+51, r26	; 0x33
    2272:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2274:	69 a9       	ldd	r22, Y+49	; 0x31
    2276:	7a a9       	ldd	r23, Y+50	; 0x32
    2278:	8b a9       	ldd	r24, Y+51	; 0x33
    227a:	9c a9       	ldd	r25, Y+52	; 0x34
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e8       	ldi	r20, 0x80	; 128
    2282:	5f e3       	ldi	r21, 0x3F	; 63
    2284:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2288:	88 23       	and	r24, r24
    228a:	2c f4       	brge	.+10     	; 0x2296 <LCD_sendCommand+0x50a>
		__ticks = 1;
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	98 ab       	std	Y+48, r25	; 0x30
    2292:	8f a7       	std	Y+47, r24	; 0x2f
    2294:	3f c0       	rjmp	.+126    	; 0x2314 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2296:	69 a9       	ldd	r22, Y+49	; 0x31
    2298:	7a a9       	ldd	r23, Y+50	; 0x32
    229a:	8b a9       	ldd	r24, Y+51	; 0x33
    229c:	9c a9       	ldd	r25, Y+52	; 0x34
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	3f ef       	ldi	r19, 0xFF	; 255
    22a2:	4f e7       	ldi	r20, 0x7F	; 127
    22a4:	57 e4       	ldi	r21, 0x47	; 71
    22a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22aa:	18 16       	cp	r1, r24
    22ac:	4c f5       	brge	.+82     	; 0x2300 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ae:	6d a9       	ldd	r22, Y+53	; 0x35
    22b0:	7e a9       	ldd	r23, Y+54	; 0x36
    22b2:	8f a9       	ldd	r24, Y+55	; 0x37
    22b4:	98 ad       	ldd	r25, Y+56	; 0x38
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	40 e2       	ldi	r20, 0x20	; 32
    22bc:	51 e4       	ldi	r21, 0x41	; 65
    22be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c2:	dc 01       	movw	r26, r24
    22c4:	cb 01       	movw	r24, r22
    22c6:	bc 01       	movw	r22, r24
    22c8:	cd 01       	movw	r24, r26
    22ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	98 ab       	std	Y+48, r25	; 0x30
    22d4:	8f a7       	std	Y+47, r24	; 0x2f
    22d6:	0f c0       	rjmp	.+30     	; 0x22f6 <LCD_sendCommand+0x56a>
    22d8:	88 ec       	ldi	r24, 0xC8	; 200
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	9e a7       	std	Y+46, r25	; 0x2e
    22de:	8d a7       	std	Y+45, r24	; 0x2d
    22e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    22e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <LCD_sendCommand+0x558>
    22e8:	9e a7       	std	Y+46, r25	; 0x2e
    22ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ee:	98 a9       	ldd	r25, Y+48	; 0x30
    22f0:	01 97       	sbiw	r24, 0x01	; 1
    22f2:	98 ab       	std	Y+48, r25	; 0x30
    22f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    22f8:	98 a9       	ldd	r25, Y+48	; 0x30
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	69 f7       	brne	.-38     	; 0x22d8 <LCD_sendCommand+0x54c>
    22fe:	14 c0       	rjmp	.+40     	; 0x2328 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2300:	69 a9       	ldd	r22, Y+49	; 0x31
    2302:	7a a9       	ldd	r23, Y+50	; 0x32
    2304:	8b a9       	ldd	r24, Y+51	; 0x33
    2306:	9c a9       	ldd	r25, Y+52	; 0x34
    2308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	98 ab       	std	Y+48, r25	; 0x30
    2312:	8f a7       	std	Y+47, r24	; 0x2f
    2314:	8f a5       	ldd	r24, Y+47	; 0x2f
    2316:	98 a9       	ldd	r25, Y+48	; 0x30
    2318:	9c a7       	std	Y+44, r25	; 0x2c
    231a:	8b a7       	std	Y+43, r24	; 0x2b
    231c:	8b a5       	ldd	r24, Y+43	; 0x2b
    231e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	f1 f7       	brne	.-4      	; 0x2320 <LCD_sendCommand+0x594>
    2324:	9c a7       	std	Y+44, r25	; 0x2c
    2326:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	62 e0       	ldi	r22, 0x02	; 2
    232c:	41 e0       	ldi	r20, 0x01	; 1
    232e:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	a0 e8       	ldi	r26, 0x80	; 128
    2338:	bf e3       	ldi	r27, 0x3F	; 63
    233a:	8f a3       	std	Y+39, r24	; 0x27
    233c:	98 a7       	std	Y+40, r25	; 0x28
    233e:	a9 a7       	std	Y+41, r26	; 0x29
    2340:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2342:	6f a1       	ldd	r22, Y+39	; 0x27
    2344:	78 a5       	ldd	r23, Y+40	; 0x28
    2346:	89 a5       	ldd	r24, Y+41	; 0x29
    2348:	9a a5       	ldd	r25, Y+42	; 0x2a
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	4a ef       	ldi	r20, 0xFA	; 250
    2350:	54 e4       	ldi	r21, 0x44	; 68
    2352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	8b a3       	std	Y+35, r24	; 0x23
    235c:	9c a3       	std	Y+36, r25	; 0x24
    235e:	ad a3       	std	Y+37, r26	; 0x25
    2360:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2362:	6b a1       	ldd	r22, Y+35	; 0x23
    2364:	7c a1       	ldd	r23, Y+36	; 0x24
    2366:	8d a1       	ldd	r24, Y+37	; 0x25
    2368:	9e a1       	ldd	r25, Y+38	; 0x26
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	40 e8       	ldi	r20, 0x80	; 128
    2370:	5f e3       	ldi	r21, 0x3F	; 63
    2372:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2376:	88 23       	and	r24, r24
    2378:	2c f4       	brge	.+10     	; 0x2384 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	9a a3       	std	Y+34, r25	; 0x22
    2380:	89 a3       	std	Y+33, r24	; 0x21
    2382:	3f c0       	rjmp	.+126    	; 0x2402 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2384:	6b a1       	ldd	r22, Y+35	; 0x23
    2386:	7c a1       	ldd	r23, Y+36	; 0x24
    2388:	8d a1       	ldd	r24, Y+37	; 0x25
    238a:	9e a1       	ldd	r25, Y+38	; 0x26
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	3f ef       	ldi	r19, 0xFF	; 255
    2390:	4f e7       	ldi	r20, 0x7F	; 127
    2392:	57 e4       	ldi	r21, 0x47	; 71
    2394:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2398:	18 16       	cp	r1, r24
    239a:	4c f5       	brge	.+82     	; 0x23ee <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    239c:	6f a1       	ldd	r22, Y+39	; 0x27
    239e:	78 a5       	ldd	r23, Y+40	; 0x28
    23a0:	89 a5       	ldd	r24, Y+41	; 0x29
    23a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	40 e2       	ldi	r20, 0x20	; 32
    23aa:	51 e4       	ldi	r21, 0x41	; 65
    23ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	bc 01       	movw	r22, r24
    23b6:	cd 01       	movw	r24, r26
    23b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23bc:	dc 01       	movw	r26, r24
    23be:	cb 01       	movw	r24, r22
    23c0:	9a a3       	std	Y+34, r25	; 0x22
    23c2:	89 a3       	std	Y+33, r24	; 0x21
    23c4:	0f c0       	rjmp	.+30     	; 0x23e4 <LCD_sendCommand+0x658>
    23c6:	88 ec       	ldi	r24, 0xC8	; 200
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	98 a3       	std	Y+32, r25	; 0x20
    23cc:	8f 8f       	std	Y+31, r24	; 0x1f
    23ce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23d0:	98 a1       	ldd	r25, Y+32	; 0x20
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <LCD_sendCommand+0x646>
    23d6:	98 a3       	std	Y+32, r25	; 0x20
    23d8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23da:	89 a1       	ldd	r24, Y+33	; 0x21
    23dc:	9a a1       	ldd	r25, Y+34	; 0x22
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	9a a3       	std	Y+34, r25	; 0x22
    23e2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e4:	89 a1       	ldd	r24, Y+33	; 0x21
    23e6:	9a a1       	ldd	r25, Y+34	; 0x22
    23e8:	00 97       	sbiw	r24, 0x00	; 0
    23ea:	69 f7       	brne	.-38     	; 0x23c6 <LCD_sendCommand+0x63a>
    23ec:	14 c0       	rjmp	.+40     	; 0x2416 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ee:	6b a1       	ldd	r22, Y+35	; 0x23
    23f0:	7c a1       	ldd	r23, Y+36	; 0x24
    23f2:	8d a1       	ldd	r24, Y+37	; 0x25
    23f4:	9e a1       	ldd	r25, Y+38	; 0x26
    23f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	9a a3       	std	Y+34, r25	; 0x22
    2400:	89 a3       	std	Y+33, r24	; 0x21
    2402:	89 a1       	ldd	r24, Y+33	; 0x21
    2404:	9a a1       	ldd	r25, Y+34	; 0x22
    2406:	9e 8f       	std	Y+30, r25	; 0x1e
    2408:	8d 8f       	std	Y+29, r24	; 0x1d
    240a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    240c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <LCD_sendCommand+0x682>
    2412:	9e 8f       	std	Y+30, r25	; 0x1e
    2414:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2416:	fe 01       	movw	r30, r28
    2418:	ed 59       	subi	r30, 0x9D	; 157
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	80 81       	ld	r24, Z
    241e:	98 2f       	mov	r25, r24
    2420:	91 70       	andi	r25, 0x01	; 1
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	63 e0       	ldi	r22, 0x03	; 3
    2426:	49 2f       	mov	r20, r25
    2428:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    242c:	fe 01       	movw	r30, r28
    242e:	ed 59       	subi	r30, 0x9D	; 157
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	80 81       	ld	r24, Z
    2434:	88 2f       	mov	r24, r24
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	82 70       	andi	r24, 0x02	; 2
    243a:	90 70       	andi	r25, 0x00	; 0
    243c:	95 95       	asr	r25
    243e:	87 95       	ror	r24
    2440:	98 2f       	mov	r25, r24
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	64 e0       	ldi	r22, 0x04	; 4
    2446:	49 2f       	mov	r20, r25
    2448:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    244c:	fe 01       	movw	r30, r28
    244e:	ed 59       	subi	r30, 0x9D	; 157
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	80 81       	ld	r24, Z
    2454:	88 2f       	mov	r24, r24
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	84 70       	andi	r24, 0x04	; 4
    245a:	90 70       	andi	r25, 0x00	; 0
    245c:	95 95       	asr	r25
    245e:	87 95       	ror	r24
    2460:	95 95       	asr	r25
    2462:	87 95       	ror	r24
    2464:	98 2f       	mov	r25, r24
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	65 e0       	ldi	r22, 0x05	; 5
    246a:	49 2f       	mov	r20, r25
    246c:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2470:	fe 01       	movw	r30, r28
    2472:	ed 59       	subi	r30, 0x9D	; 157
    2474:	ff 4f       	sbci	r31, 0xFF	; 255
    2476:	80 81       	ld	r24, Z
    2478:	88 2f       	mov	r24, r24
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	88 70       	andi	r24, 0x08	; 8
    247e:	90 70       	andi	r25, 0x00	; 0
    2480:	95 95       	asr	r25
    2482:	87 95       	ror	r24
    2484:	95 95       	asr	r25
    2486:	87 95       	ror	r24
    2488:	95 95       	asr	r25
    248a:	87 95       	ror	r24
    248c:	98 2f       	mov	r25, r24
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	66 e0       	ldi	r22, 0x06	; 6
    2492:	49 2f       	mov	r20, r25
    2494:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	a0 e8       	ldi	r26, 0x80	; 128
    249e:	bf e3       	ldi	r27, 0x3F	; 63
    24a0:	89 8f       	std	Y+25, r24	; 0x19
    24a2:	9a 8f       	std	Y+26, r25	; 0x1a
    24a4:	ab 8f       	std	Y+27, r26	; 0x1b
    24a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a8:	69 8d       	ldd	r22, Y+25	; 0x19
    24aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	4a ef       	ldi	r20, 0xFA	; 250
    24b6:	54 e4       	ldi	r21, 0x44	; 68
    24b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	8d 8b       	std	Y+21, r24	; 0x15
    24c2:	9e 8b       	std	Y+22, r25	; 0x16
    24c4:	af 8b       	std	Y+23, r26	; 0x17
    24c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24c8:	6d 89       	ldd	r22, Y+21	; 0x15
    24ca:	7e 89       	ldd	r23, Y+22	; 0x16
    24cc:	8f 89       	ldd	r24, Y+23	; 0x17
    24ce:	98 8d       	ldd	r25, Y+24	; 0x18
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e8       	ldi	r20, 0x80	; 128
    24d6:	5f e3       	ldi	r21, 0x3F	; 63
    24d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24dc:	88 23       	and	r24, r24
    24de:	2c f4       	brge	.+10     	; 0x24ea <LCD_sendCommand+0x75e>
		__ticks = 1;
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	9c 8b       	std	Y+20, r25	; 0x14
    24e6:	8b 8b       	std	Y+19, r24	; 0x13
    24e8:	3f c0       	rjmp	.+126    	; 0x2568 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    24ea:	6d 89       	ldd	r22, Y+21	; 0x15
    24ec:	7e 89       	ldd	r23, Y+22	; 0x16
    24ee:	8f 89       	ldd	r24, Y+23	; 0x17
    24f0:	98 8d       	ldd	r25, Y+24	; 0x18
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	3f ef       	ldi	r19, 0xFF	; 255
    24f6:	4f e7       	ldi	r20, 0x7F	; 127
    24f8:	57 e4       	ldi	r21, 0x47	; 71
    24fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24fe:	18 16       	cp	r1, r24
    2500:	4c f5       	brge	.+82     	; 0x2554 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2502:	69 8d       	ldd	r22, Y+25	; 0x19
    2504:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2506:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2508:	9c 8d       	ldd	r25, Y+28	; 0x1c
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e2       	ldi	r20, 0x20	; 32
    2510:	51 e4       	ldi	r21, 0x41	; 65
    2512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	bc 01       	movw	r22, r24
    251c:	cd 01       	movw	r24, r26
    251e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	9c 8b       	std	Y+20, r25	; 0x14
    2528:	8b 8b       	std	Y+19, r24	; 0x13
    252a:	0f c0       	rjmp	.+30     	; 0x254a <LCD_sendCommand+0x7be>
    252c:	88 ec       	ldi	r24, 0xC8	; 200
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	9a 8b       	std	Y+18, r25	; 0x12
    2532:	89 8b       	std	Y+17, r24	; 0x11
    2534:	89 89       	ldd	r24, Y+17	; 0x11
    2536:	9a 89       	ldd	r25, Y+18	; 0x12
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	f1 f7       	brne	.-4      	; 0x2538 <LCD_sendCommand+0x7ac>
    253c:	9a 8b       	std	Y+18, r25	; 0x12
    253e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2540:	8b 89       	ldd	r24, Y+19	; 0x13
    2542:	9c 89       	ldd	r25, Y+20	; 0x14
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	9c 8b       	std	Y+20, r25	; 0x14
    2548:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254a:	8b 89       	ldd	r24, Y+19	; 0x13
    254c:	9c 89       	ldd	r25, Y+20	; 0x14
    254e:	00 97       	sbiw	r24, 0x00	; 0
    2550:	69 f7       	brne	.-38     	; 0x252c <LCD_sendCommand+0x7a0>
    2552:	14 c0       	rjmp	.+40     	; 0x257c <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2554:	6d 89       	ldd	r22, Y+21	; 0x15
    2556:	7e 89       	ldd	r23, Y+22	; 0x16
    2558:	8f 89       	ldd	r24, Y+23	; 0x17
    255a:	98 8d       	ldd	r25, Y+24	; 0x18
    255c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	9c 8b       	std	Y+20, r25	; 0x14
    2566:	8b 8b       	std	Y+19, r24	; 0x13
    2568:	8b 89       	ldd	r24, Y+19	; 0x13
    256a:	9c 89       	ldd	r25, Y+20	; 0x14
    256c:	98 8b       	std	Y+16, r25	; 0x10
    256e:	8f 87       	std	Y+15, r24	; 0x0f
    2570:	8f 85       	ldd	r24, Y+15	; 0x0f
    2572:	98 89       	ldd	r25, Y+16	; 0x10
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	f1 f7       	brne	.-4      	; 0x2574 <LCD_sendCommand+0x7e8>
    2578:	98 8b       	std	Y+16, r25	; 0x10
    257a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	62 e0       	ldi	r22, 0x02	; 2
    2580:	40 e0       	ldi	r20, 0x00	; 0
    2582:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	a0 e8       	ldi	r26, 0x80	; 128
    258c:	bf e3       	ldi	r27, 0x3F	; 63
    258e:	8b 87       	std	Y+11, r24	; 0x0b
    2590:	9c 87       	std	Y+12, r25	; 0x0c
    2592:	ad 87       	std	Y+13, r26	; 0x0d
    2594:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2596:	6b 85       	ldd	r22, Y+11	; 0x0b
    2598:	7c 85       	ldd	r23, Y+12	; 0x0c
    259a:	8d 85       	ldd	r24, Y+13	; 0x0d
    259c:	9e 85       	ldd	r25, Y+14	; 0x0e
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	4a ef       	ldi	r20, 0xFA	; 250
    25a4:	54 e4       	ldi	r21, 0x44	; 68
    25a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	8f 83       	std	Y+7, r24	; 0x07
    25b0:	98 87       	std	Y+8, r25	; 0x08
    25b2:	a9 87       	std	Y+9, r26	; 0x09
    25b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25b6:	6f 81       	ldd	r22, Y+7	; 0x07
    25b8:	78 85       	ldd	r23, Y+8	; 0x08
    25ba:	89 85       	ldd	r24, Y+9	; 0x09
    25bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e8       	ldi	r20, 0x80	; 128
    25c4:	5f e3       	ldi	r21, 0x3F	; 63
    25c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ca:	88 23       	and	r24, r24
    25cc:	2c f4       	brge	.+10     	; 0x25d8 <LCD_sendCommand+0x84c>
		__ticks = 1;
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	9e 83       	std	Y+6, r25	; 0x06
    25d4:	8d 83       	std	Y+5, r24	; 0x05
    25d6:	3f c0       	rjmp	.+126    	; 0x2656 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    25d8:	6f 81       	ldd	r22, Y+7	; 0x07
    25da:	78 85       	ldd	r23, Y+8	; 0x08
    25dc:	89 85       	ldd	r24, Y+9	; 0x09
    25de:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	3f ef       	ldi	r19, 0xFF	; 255
    25e4:	4f e7       	ldi	r20, 0x7F	; 127
    25e6:	57 e4       	ldi	r21, 0x47	; 71
    25e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ec:	18 16       	cp	r1, r24
    25ee:	4c f5       	brge	.+82     	; 0x2642 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	40 e2       	ldi	r20, 0x20	; 32
    25fe:	51 e4       	ldi	r21, 0x41	; 65
    2600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	bc 01       	movw	r22, r24
    260a:	cd 01       	movw	r24, r26
    260c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	9e 83       	std	Y+6, r25	; 0x06
    2616:	8d 83       	std	Y+5, r24	; 0x05
    2618:	0f c0       	rjmp	.+30     	; 0x2638 <LCD_sendCommand+0x8ac>
    261a:	88 ec       	ldi	r24, 0xC8	; 200
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	9c 83       	std	Y+4, r25	; 0x04
    2620:	8b 83       	std	Y+3, r24	; 0x03
    2622:	8b 81       	ldd	r24, Y+3	; 0x03
    2624:	9c 81       	ldd	r25, Y+4	; 0x04
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	f1 f7       	brne	.-4      	; 0x2626 <LCD_sendCommand+0x89a>
    262a:	9c 83       	std	Y+4, r25	; 0x04
    262c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262e:	8d 81       	ldd	r24, Y+5	; 0x05
    2630:	9e 81       	ldd	r25, Y+6	; 0x06
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	9e 83       	std	Y+6, r25	; 0x06
    2636:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2638:	8d 81       	ldd	r24, Y+5	; 0x05
    263a:	9e 81       	ldd	r25, Y+6	; 0x06
    263c:	00 97       	sbiw	r24, 0x00	; 0
    263e:	69 f7       	brne	.-38     	; 0x261a <LCD_sendCommand+0x88e>
    2640:	14 c0       	rjmp	.+40     	; 0x266a <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2642:	6f 81       	ldd	r22, Y+7	; 0x07
    2644:	78 85       	ldd	r23, Y+8	; 0x08
    2646:	89 85       	ldd	r24, Y+9	; 0x09
    2648:	9a 85       	ldd	r25, Y+10	; 0x0a
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	9e 83       	std	Y+6, r25	; 0x06
    2654:	8d 83       	std	Y+5, r24	; 0x05
    2656:	8d 81       	ldd	r24, Y+5	; 0x05
    2658:	9e 81       	ldd	r25, Y+6	; 0x06
    265a:	9a 83       	std	Y+2, r25	; 0x02
    265c:	89 83       	std	Y+1, r24	; 0x01
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	9a 81       	ldd	r25, Y+2	; 0x02
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	f1 f7       	brne	.-4      	; 0x2662 <LCD_sendCommand+0x8d6>
    2666:	9a 83       	std	Y+2, r25	; 0x02
    2668:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    266a:	cd 59       	subi	r28, 0x9D	; 157
    266c:	df 4f       	sbci	r29, 0xFF	; 255
    266e:	0f b6       	in	r0, 0x3f	; 63
    2670:	f8 94       	cli
    2672:	de bf       	out	0x3e, r29	; 62
    2674:	0f be       	out	0x3f, r0	; 63
    2676:	cd bf       	out	0x3d, r28	; 61
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	1f 91       	pop	r17
    267e:	0f 91       	pop	r16
    2680:	08 95       	ret

00002682 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2682:	0f 93       	push	r16
    2684:	1f 93       	push	r17
    2686:	df 93       	push	r29
    2688:	cf 93       	push	r28
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    268e:	c3 56       	subi	r28, 0x63	; 99
    2690:	d0 40       	sbci	r29, 0x00	; 0
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	cd bf       	out	0x3d, r28	; 61
    269c:	fe 01       	movw	r30, r28
    269e:	ed 59       	subi	r30, 0x9D	; 157
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    26a4:	80 e0       	ldi	r24, 0x00	; 0
    26a6:	61 e0       	ldi	r22, 0x01	; 1
    26a8:	41 e0       	ldi	r20, 0x01	; 1
    26aa:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
    26ae:	fe 01       	movw	r30, r28
    26b0:	e1 5a       	subi	r30, 0xA1	; 161
    26b2:	ff 4f       	sbci	r31, 0xFF	; 255
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	a0 e8       	ldi	r26, 0x80	; 128
    26ba:	bf e3       	ldi	r27, 0x3F	; 63
    26bc:	80 83       	st	Z, r24
    26be:	91 83       	std	Z+1, r25	; 0x01
    26c0:	a2 83       	std	Z+2, r26	; 0x02
    26c2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c4:	8e 01       	movw	r16, r28
    26c6:	05 5a       	subi	r16, 0xA5	; 165
    26c8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ca:	fe 01       	movw	r30, r28
    26cc:	e1 5a       	subi	r30, 0xA1	; 161
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	60 81       	ld	r22, Z
    26d2:	71 81       	ldd	r23, Z+1	; 0x01
    26d4:	82 81       	ldd	r24, Z+2	; 0x02
    26d6:	93 81       	ldd	r25, Z+3	; 0x03
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	4a ef       	ldi	r20, 0xFA	; 250
    26de:	54 e4       	ldi	r21, 0x44	; 68
    26e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	f8 01       	movw	r30, r16
    26ea:	80 83       	st	Z, r24
    26ec:	91 83       	std	Z+1, r25	; 0x01
    26ee:	a2 83       	std	Z+2, r26	; 0x02
    26f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26f2:	fe 01       	movw	r30, r28
    26f4:	e5 5a       	subi	r30, 0xA5	; 165
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	60 81       	ld	r22, Z
    26fa:	71 81       	ldd	r23, Z+1	; 0x01
    26fc:	82 81       	ldd	r24, Z+2	; 0x02
    26fe:	93 81       	ldd	r25, Z+3	; 0x03
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	40 e8       	ldi	r20, 0x80	; 128
    2706:	5f e3       	ldi	r21, 0x3F	; 63
    2708:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    270c:	88 23       	and	r24, r24
    270e:	44 f4       	brge	.+16     	; 0x2720 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2710:	fe 01       	movw	r30, r28
    2712:	e7 5a       	subi	r30, 0xA7	; 167
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	91 83       	std	Z+1, r25	; 0x01
    271c:	80 83       	st	Z, r24
    271e:	64 c0       	rjmp	.+200    	; 0x27e8 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2720:	fe 01       	movw	r30, r28
    2722:	e5 5a       	subi	r30, 0xA5	; 165
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	60 81       	ld	r22, Z
    2728:	71 81       	ldd	r23, Z+1	; 0x01
    272a:	82 81       	ldd	r24, Z+2	; 0x02
    272c:	93 81       	ldd	r25, Z+3	; 0x03
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	3f ef       	ldi	r19, 0xFF	; 255
    2732:	4f e7       	ldi	r20, 0x7F	; 127
    2734:	57 e4       	ldi	r21, 0x47	; 71
    2736:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    273a:	18 16       	cp	r1, r24
    273c:	0c f0       	brlt	.+2      	; 0x2740 <LCD_displayCharacter+0xbe>
    273e:	43 c0       	rjmp	.+134    	; 0x27c6 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2740:	fe 01       	movw	r30, r28
    2742:	e1 5a       	subi	r30, 0xA1	; 161
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	60 81       	ld	r22, Z
    2748:	71 81       	ldd	r23, Z+1	; 0x01
    274a:	82 81       	ldd	r24, Z+2	; 0x02
    274c:	93 81       	ldd	r25, Z+3	; 0x03
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e2       	ldi	r20, 0x20	; 32
    2754:	51 e4       	ldi	r21, 0x41	; 65
    2756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	8e 01       	movw	r16, r28
    2760:	07 5a       	subi	r16, 0xA7	; 167
    2762:	1f 4f       	sbci	r17, 0xFF	; 255
    2764:	bc 01       	movw	r22, r24
    2766:	cd 01       	movw	r24, r26
    2768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	f8 01       	movw	r30, r16
    2772:	91 83       	std	Z+1, r25	; 0x01
    2774:	80 83       	st	Z, r24
    2776:	1f c0       	rjmp	.+62     	; 0x27b6 <LCD_displayCharacter+0x134>
    2778:	fe 01       	movw	r30, r28
    277a:	e9 5a       	subi	r30, 0xA9	; 169
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	88 ec       	ldi	r24, 0xC8	; 200
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	91 83       	std	Z+1, r25	; 0x01
    2784:	80 83       	st	Z, r24
    2786:	fe 01       	movw	r30, r28
    2788:	e9 5a       	subi	r30, 0xA9	; 169
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	80 81       	ld	r24, Z
    278e:	91 81       	ldd	r25, Z+1	; 0x01
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	f1 f7       	brne	.-4      	; 0x2790 <LCD_displayCharacter+0x10e>
    2794:	fe 01       	movw	r30, r28
    2796:	e9 5a       	subi	r30, 0xA9	; 169
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	91 83       	std	Z+1, r25	; 0x01
    279c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279e:	de 01       	movw	r26, r28
    27a0:	a7 5a       	subi	r26, 0xA7	; 167
    27a2:	bf 4f       	sbci	r27, 0xFF	; 255
    27a4:	fe 01       	movw	r30, r28
    27a6:	e7 5a       	subi	r30, 0xA7	; 167
    27a8:	ff 4f       	sbci	r31, 0xFF	; 255
    27aa:	80 81       	ld	r24, Z
    27ac:	91 81       	ldd	r25, Z+1	; 0x01
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	11 96       	adiw	r26, 0x01	; 1
    27b2:	9c 93       	st	X, r25
    27b4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b6:	fe 01       	movw	r30, r28
    27b8:	e7 5a       	subi	r30, 0xA7	; 167
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	80 81       	ld	r24, Z
    27be:	91 81       	ldd	r25, Z+1	; 0x01
    27c0:	00 97       	sbiw	r24, 0x00	; 0
    27c2:	d1 f6       	brne	.-76     	; 0x2778 <LCD_displayCharacter+0xf6>
    27c4:	27 c0       	rjmp	.+78     	; 0x2814 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c6:	8e 01       	movw	r16, r28
    27c8:	07 5a       	subi	r16, 0xA7	; 167
    27ca:	1f 4f       	sbci	r17, 0xFF	; 255
    27cc:	fe 01       	movw	r30, r28
    27ce:	e5 5a       	subi	r30, 0xA5	; 165
    27d0:	ff 4f       	sbci	r31, 0xFF	; 255
    27d2:	60 81       	ld	r22, Z
    27d4:	71 81       	ldd	r23, Z+1	; 0x01
    27d6:	82 81       	ldd	r24, Z+2	; 0x02
    27d8:	93 81       	ldd	r25, Z+3	; 0x03
    27da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	f8 01       	movw	r30, r16
    27e4:	91 83       	std	Z+1, r25	; 0x01
    27e6:	80 83       	st	Z, r24
    27e8:	de 01       	movw	r26, r28
    27ea:	ab 5a       	subi	r26, 0xAB	; 171
    27ec:	bf 4f       	sbci	r27, 0xFF	; 255
    27ee:	fe 01       	movw	r30, r28
    27f0:	e7 5a       	subi	r30, 0xA7	; 167
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	80 81       	ld	r24, Z
    27f6:	91 81       	ldd	r25, Z+1	; 0x01
    27f8:	8d 93       	st	X+, r24
    27fa:	9c 93       	st	X, r25
    27fc:	fe 01       	movw	r30, r28
    27fe:	eb 5a       	subi	r30, 0xAB	; 171
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	80 81       	ld	r24, Z
    2804:	91 81       	ldd	r25, Z+1	; 0x01
    2806:	01 97       	sbiw	r24, 0x01	; 1
    2808:	f1 f7       	brne	.-4      	; 0x2806 <LCD_displayCharacter+0x184>
    280a:	fe 01       	movw	r30, r28
    280c:	eb 5a       	subi	r30, 0xAB	; 171
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	91 83       	std	Z+1, r25	; 0x01
    2812:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	62 e0       	ldi	r22, 0x02	; 2
    2818:	41 e0       	ldi	r20, 0x01	; 1
    281a:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
    281e:	fe 01       	movw	r30, r28
    2820:	ef 5a       	subi	r30, 0xAF	; 175
    2822:	ff 4f       	sbci	r31, 0xFF	; 255
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	a0 e8       	ldi	r26, 0x80	; 128
    282a:	bf e3       	ldi	r27, 0x3F	; 63
    282c:	80 83       	st	Z, r24
    282e:	91 83       	std	Z+1, r25	; 0x01
    2830:	a2 83       	std	Z+2, r26	; 0x02
    2832:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2834:	8e 01       	movw	r16, r28
    2836:	03 5b       	subi	r16, 0xB3	; 179
    2838:	1f 4f       	sbci	r17, 0xFF	; 255
    283a:	fe 01       	movw	r30, r28
    283c:	ef 5a       	subi	r30, 0xAF	; 175
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	60 81       	ld	r22, Z
    2842:	71 81       	ldd	r23, Z+1	; 0x01
    2844:	82 81       	ldd	r24, Z+2	; 0x02
    2846:	93 81       	ldd	r25, Z+3	; 0x03
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	4a ef       	ldi	r20, 0xFA	; 250
    284e:	54 e4       	ldi	r21, 0x44	; 68
    2850:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	f8 01       	movw	r30, r16
    285a:	80 83       	st	Z, r24
    285c:	91 83       	std	Z+1, r25	; 0x01
    285e:	a2 83       	std	Z+2, r26	; 0x02
    2860:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2862:	fe 01       	movw	r30, r28
    2864:	e3 5b       	subi	r30, 0xB3	; 179
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	60 81       	ld	r22, Z
    286a:	71 81       	ldd	r23, Z+1	; 0x01
    286c:	82 81       	ldd	r24, Z+2	; 0x02
    286e:	93 81       	ldd	r25, Z+3	; 0x03
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	40 e8       	ldi	r20, 0x80	; 128
    2876:	5f e3       	ldi	r21, 0x3F	; 63
    2878:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    287c:	88 23       	and	r24, r24
    287e:	44 f4       	brge	.+16     	; 0x2890 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2880:	fe 01       	movw	r30, r28
    2882:	e5 5b       	subi	r30, 0xB5	; 181
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	91 83       	std	Z+1, r25	; 0x01
    288c:	80 83       	st	Z, r24
    288e:	64 c0       	rjmp	.+200    	; 0x2958 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2890:	fe 01       	movw	r30, r28
    2892:	e3 5b       	subi	r30, 0xB3	; 179
    2894:	ff 4f       	sbci	r31, 0xFF	; 255
    2896:	60 81       	ld	r22, Z
    2898:	71 81       	ldd	r23, Z+1	; 0x01
    289a:	82 81       	ldd	r24, Z+2	; 0x02
    289c:	93 81       	ldd	r25, Z+3	; 0x03
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	3f ef       	ldi	r19, 0xFF	; 255
    28a2:	4f e7       	ldi	r20, 0x7F	; 127
    28a4:	57 e4       	ldi	r21, 0x47	; 71
    28a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28aa:	18 16       	cp	r1, r24
    28ac:	0c f0       	brlt	.+2      	; 0x28b0 <LCD_displayCharacter+0x22e>
    28ae:	43 c0       	rjmp	.+134    	; 0x2936 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b0:	fe 01       	movw	r30, r28
    28b2:	ef 5a       	subi	r30, 0xAF	; 175
    28b4:	ff 4f       	sbci	r31, 0xFF	; 255
    28b6:	60 81       	ld	r22, Z
    28b8:	71 81       	ldd	r23, Z+1	; 0x01
    28ba:	82 81       	ldd	r24, Z+2	; 0x02
    28bc:	93 81       	ldd	r25, Z+3	; 0x03
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	40 e2       	ldi	r20, 0x20	; 32
    28c4:	51 e4       	ldi	r21, 0x41	; 65
    28c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	8e 01       	movw	r16, r28
    28d0:	05 5b       	subi	r16, 0xB5	; 181
    28d2:	1f 4f       	sbci	r17, 0xFF	; 255
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	f8 01       	movw	r30, r16
    28e2:	91 83       	std	Z+1, r25	; 0x01
    28e4:	80 83       	st	Z, r24
    28e6:	1f c0       	rjmp	.+62     	; 0x2926 <LCD_displayCharacter+0x2a4>
    28e8:	fe 01       	movw	r30, r28
    28ea:	e7 5b       	subi	r30, 0xB7	; 183
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	88 ec       	ldi	r24, 0xC8	; 200
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	91 83       	std	Z+1, r25	; 0x01
    28f4:	80 83       	st	Z, r24
    28f6:	fe 01       	movw	r30, r28
    28f8:	e7 5b       	subi	r30, 0xB7	; 183
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	80 81       	ld	r24, Z
    28fe:	91 81       	ldd	r25, Z+1	; 0x01
    2900:	01 97       	sbiw	r24, 0x01	; 1
    2902:	f1 f7       	brne	.-4      	; 0x2900 <LCD_displayCharacter+0x27e>
    2904:	fe 01       	movw	r30, r28
    2906:	e7 5b       	subi	r30, 0xB7	; 183
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	91 83       	std	Z+1, r25	; 0x01
    290c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    290e:	de 01       	movw	r26, r28
    2910:	a5 5b       	subi	r26, 0xB5	; 181
    2912:	bf 4f       	sbci	r27, 0xFF	; 255
    2914:	fe 01       	movw	r30, r28
    2916:	e5 5b       	subi	r30, 0xB5	; 181
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	80 81       	ld	r24, Z
    291c:	91 81       	ldd	r25, Z+1	; 0x01
    291e:	01 97       	sbiw	r24, 0x01	; 1
    2920:	11 96       	adiw	r26, 0x01	; 1
    2922:	9c 93       	st	X, r25
    2924:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2926:	fe 01       	movw	r30, r28
    2928:	e5 5b       	subi	r30, 0xB5	; 181
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	80 81       	ld	r24, Z
    292e:	91 81       	ldd	r25, Z+1	; 0x01
    2930:	00 97       	sbiw	r24, 0x00	; 0
    2932:	d1 f6       	brne	.-76     	; 0x28e8 <LCD_displayCharacter+0x266>
    2934:	27 c0       	rjmp	.+78     	; 0x2984 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2936:	8e 01       	movw	r16, r28
    2938:	05 5b       	subi	r16, 0xB5	; 181
    293a:	1f 4f       	sbci	r17, 0xFF	; 255
    293c:	fe 01       	movw	r30, r28
    293e:	e3 5b       	subi	r30, 0xB3	; 179
    2940:	ff 4f       	sbci	r31, 0xFF	; 255
    2942:	60 81       	ld	r22, Z
    2944:	71 81       	ldd	r23, Z+1	; 0x01
    2946:	82 81       	ldd	r24, Z+2	; 0x02
    2948:	93 81       	ldd	r25, Z+3	; 0x03
    294a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	f8 01       	movw	r30, r16
    2954:	91 83       	std	Z+1, r25	; 0x01
    2956:	80 83       	st	Z, r24
    2958:	de 01       	movw	r26, r28
    295a:	a9 5b       	subi	r26, 0xB9	; 185
    295c:	bf 4f       	sbci	r27, 0xFF	; 255
    295e:	fe 01       	movw	r30, r28
    2960:	e5 5b       	subi	r30, 0xB5	; 181
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	80 81       	ld	r24, Z
    2966:	91 81       	ldd	r25, Z+1	; 0x01
    2968:	8d 93       	st	X+, r24
    296a:	9c 93       	st	X, r25
    296c:	fe 01       	movw	r30, r28
    296e:	e9 5b       	subi	r30, 0xB9	; 185
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	80 81       	ld	r24, Z
    2974:	91 81       	ldd	r25, Z+1	; 0x01
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	f1 f7       	brne	.-4      	; 0x2976 <LCD_displayCharacter+0x2f4>
    297a:	fe 01       	movw	r30, r28
    297c:	e9 5b       	subi	r30, 0xB9	; 185
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	91 83       	std	Z+1, r25	; 0x01
    2982:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2984:	fe 01       	movw	r30, r28
    2986:	ed 59       	subi	r30, 0x9D	; 157
    2988:	ff 4f       	sbci	r31, 0xFF	; 255
    298a:	80 81       	ld	r24, Z
    298c:	88 2f       	mov	r24, r24
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	80 71       	andi	r24, 0x10	; 16
    2992:	90 70       	andi	r25, 0x00	; 0
    2994:	95 95       	asr	r25
    2996:	87 95       	ror	r24
    2998:	95 95       	asr	r25
    299a:	87 95       	ror	r24
    299c:	95 95       	asr	r25
    299e:	87 95       	ror	r24
    29a0:	95 95       	asr	r25
    29a2:	87 95       	ror	r24
    29a4:	98 2f       	mov	r25, r24
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	63 e0       	ldi	r22, 0x03	; 3
    29aa:	49 2f       	mov	r20, r25
    29ac:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    29b0:	fe 01       	movw	r30, r28
    29b2:	ed 59       	subi	r30, 0x9D	; 157
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	80 81       	ld	r24, Z
    29b8:	88 2f       	mov	r24, r24
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	80 72       	andi	r24, 0x20	; 32
    29be:	90 70       	andi	r25, 0x00	; 0
    29c0:	95 95       	asr	r25
    29c2:	87 95       	ror	r24
    29c4:	95 95       	asr	r25
    29c6:	87 95       	ror	r24
    29c8:	95 95       	asr	r25
    29ca:	87 95       	ror	r24
    29cc:	95 95       	asr	r25
    29ce:	87 95       	ror	r24
    29d0:	95 95       	asr	r25
    29d2:	87 95       	ror	r24
    29d4:	98 2f       	mov	r25, r24
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	64 e0       	ldi	r22, 0x04	; 4
    29da:	49 2f       	mov	r20, r25
    29dc:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    29e0:	fe 01       	movw	r30, r28
    29e2:	ed 59       	subi	r30, 0x9D	; 157
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	80 81       	ld	r24, Z
    29e8:	88 2f       	mov	r24, r24
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	80 74       	andi	r24, 0x40	; 64
    29ee:	90 70       	andi	r25, 0x00	; 0
    29f0:	08 2e       	mov	r0, r24
    29f2:	89 2f       	mov	r24, r25
    29f4:	00 0c       	add	r0, r0
    29f6:	88 1f       	adc	r24, r24
    29f8:	99 0b       	sbc	r25, r25
    29fa:	00 0c       	add	r0, r0
    29fc:	88 1f       	adc	r24, r24
    29fe:	99 1f       	adc	r25, r25
    2a00:	98 2f       	mov	r25, r24
    2a02:	80 e0       	ldi	r24, 0x00	; 0
    2a04:	65 e0       	ldi	r22, 0x05	; 5
    2a06:	49 2f       	mov	r20, r25
    2a08:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	ed 59       	subi	r30, 0x9D	; 157
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	80 81       	ld	r24, Z
    2a14:	98 2f       	mov	r25, r24
    2a16:	99 1f       	adc	r25, r25
    2a18:	99 27       	eor	r25, r25
    2a1a:	99 1f       	adc	r25, r25
    2a1c:	80 e0       	ldi	r24, 0x00	; 0
    2a1e:	66 e0       	ldi	r22, 0x06	; 6
    2a20:	49 2f       	mov	r20, r25
    2a22:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
    2a26:	fe 01       	movw	r30, r28
    2a28:	ed 5b       	subi	r30, 0xBD	; 189
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	a0 e8       	ldi	r26, 0x80	; 128
    2a32:	bf e3       	ldi	r27, 0x3F	; 63
    2a34:	80 83       	st	Z, r24
    2a36:	91 83       	std	Z+1, r25	; 0x01
    2a38:	a2 83       	std	Z+2, r26	; 0x02
    2a3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a3c:	8e 01       	movw	r16, r28
    2a3e:	01 5c       	subi	r16, 0xC1	; 193
    2a40:	1f 4f       	sbci	r17, 0xFF	; 255
    2a42:	fe 01       	movw	r30, r28
    2a44:	ed 5b       	subi	r30, 0xBD	; 189
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	60 81       	ld	r22, Z
    2a4a:	71 81       	ldd	r23, Z+1	; 0x01
    2a4c:	82 81       	ldd	r24, Z+2	; 0x02
    2a4e:	93 81       	ldd	r25, Z+3	; 0x03
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	4a ef       	ldi	r20, 0xFA	; 250
    2a56:	54 e4       	ldi	r21, 0x44	; 68
    2a58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5c:	dc 01       	movw	r26, r24
    2a5e:	cb 01       	movw	r24, r22
    2a60:	f8 01       	movw	r30, r16
    2a62:	80 83       	st	Z, r24
    2a64:	91 83       	std	Z+1, r25	; 0x01
    2a66:	a2 83       	std	Z+2, r26	; 0x02
    2a68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	ff 96       	adiw	r30, 0x3f	; 63
    2a6e:	60 81       	ld	r22, Z
    2a70:	71 81       	ldd	r23, Z+1	; 0x01
    2a72:	82 81       	ldd	r24, Z+2	; 0x02
    2a74:	93 81       	ldd	r25, Z+3	; 0x03
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e8       	ldi	r20, 0x80	; 128
    2a7c:	5f e3       	ldi	r21, 0x3F	; 63
    2a7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a82:	88 23       	and	r24, r24
    2a84:	2c f4       	brge	.+10     	; 0x2a90 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	9e af       	std	Y+62, r25	; 0x3e
    2a8c:	8d af       	std	Y+61, r24	; 0x3d
    2a8e:	46 c0       	rjmp	.+140    	; 0x2b1c <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2a90:	fe 01       	movw	r30, r28
    2a92:	ff 96       	adiw	r30, 0x3f	; 63
    2a94:	60 81       	ld	r22, Z
    2a96:	71 81       	ldd	r23, Z+1	; 0x01
    2a98:	82 81       	ldd	r24, Z+2	; 0x02
    2a9a:	93 81       	ldd	r25, Z+3	; 0x03
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	3f ef       	ldi	r19, 0xFF	; 255
    2aa0:	4f e7       	ldi	r20, 0x7F	; 127
    2aa2:	57 e4       	ldi	r21, 0x47	; 71
    2aa4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aa8:	18 16       	cp	r1, r24
    2aaa:	64 f5       	brge	.+88     	; 0x2b04 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aac:	fe 01       	movw	r30, r28
    2aae:	ed 5b       	subi	r30, 0xBD	; 189
    2ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab2:	60 81       	ld	r22, Z
    2ab4:	71 81       	ldd	r23, Z+1	; 0x01
    2ab6:	82 81       	ldd	r24, Z+2	; 0x02
    2ab8:	93 81       	ldd	r25, Z+3	; 0x03
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	40 e2       	ldi	r20, 0x20	; 32
    2ac0:	51 e4       	ldi	r21, 0x41	; 65
    2ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	bc 01       	movw	r22, r24
    2acc:	cd 01       	movw	r24, r26
    2ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	9e af       	std	Y+62, r25	; 0x3e
    2ad8:	8d af       	std	Y+61, r24	; 0x3d
    2ada:	0f c0       	rjmp	.+30     	; 0x2afa <LCD_displayCharacter+0x478>
    2adc:	88 ec       	ldi	r24, 0xC8	; 200
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	9c af       	std	Y+60, r25	; 0x3c
    2ae2:	8b af       	std	Y+59, r24	; 0x3b
    2ae4:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ae6:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	f1 f7       	brne	.-4      	; 0x2ae8 <LCD_displayCharacter+0x466>
    2aec:	9c af       	std	Y+60, r25	; 0x3c
    2aee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2af2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	9e af       	std	Y+62, r25	; 0x3e
    2af8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afa:	8d ad       	ldd	r24, Y+61	; 0x3d
    2afc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2afe:	00 97       	sbiw	r24, 0x00	; 0
    2b00:	69 f7       	brne	.-38     	; 0x2adc <LCD_displayCharacter+0x45a>
    2b02:	16 c0       	rjmp	.+44     	; 0x2b30 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b04:	fe 01       	movw	r30, r28
    2b06:	ff 96       	adiw	r30, 0x3f	; 63
    2b08:	60 81       	ld	r22, Z
    2b0a:	71 81       	ldd	r23, Z+1	; 0x01
    2b0c:	82 81       	ldd	r24, Z+2	; 0x02
    2b0e:	93 81       	ldd	r25, Z+3	; 0x03
    2b10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b14:	dc 01       	movw	r26, r24
    2b16:	cb 01       	movw	r24, r22
    2b18:	9e af       	std	Y+62, r25	; 0x3e
    2b1a:	8d af       	std	Y+61, r24	; 0x3d
    2b1c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2b1e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2b20:	9a af       	std	Y+58, r25	; 0x3a
    2b22:	89 af       	std	Y+57, r24	; 0x39
    2b24:	89 ad       	ldd	r24, Y+57	; 0x39
    2b26:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b28:	01 97       	sbiw	r24, 0x01	; 1
    2b2a:	f1 f7       	brne	.-4      	; 0x2b28 <LCD_displayCharacter+0x4a6>
    2b2c:	9a af       	std	Y+58, r25	; 0x3a
    2b2e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	62 e0       	ldi	r22, 0x02	; 2
    2b34:	40 e0       	ldi	r20, 0x00	; 0
    2b36:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	a0 e8       	ldi	r26, 0x80	; 128
    2b40:	bf e3       	ldi	r27, 0x3F	; 63
    2b42:	8d ab       	std	Y+53, r24	; 0x35
    2b44:	9e ab       	std	Y+54, r25	; 0x36
    2b46:	af ab       	std	Y+55, r26	; 0x37
    2b48:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b4a:	6d a9       	ldd	r22, Y+53	; 0x35
    2b4c:	7e a9       	ldd	r23, Y+54	; 0x36
    2b4e:	8f a9       	ldd	r24, Y+55	; 0x37
    2b50:	98 ad       	ldd	r25, Y+56	; 0x38
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	4a ef       	ldi	r20, 0xFA	; 250
    2b58:	54 e4       	ldi	r21, 0x44	; 68
    2b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	89 ab       	std	Y+49, r24	; 0x31
    2b64:	9a ab       	std	Y+50, r25	; 0x32
    2b66:	ab ab       	std	Y+51, r26	; 0x33
    2b68:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b6a:	69 a9       	ldd	r22, Y+49	; 0x31
    2b6c:	7a a9       	ldd	r23, Y+50	; 0x32
    2b6e:	8b a9       	ldd	r24, Y+51	; 0x33
    2b70:	9c a9       	ldd	r25, Y+52	; 0x34
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	40 e8       	ldi	r20, 0x80	; 128
    2b78:	5f e3       	ldi	r21, 0x3F	; 63
    2b7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b7e:	88 23       	and	r24, r24
    2b80:	2c f4       	brge	.+10     	; 0x2b8c <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	98 ab       	std	Y+48, r25	; 0x30
    2b88:	8f a7       	std	Y+47, r24	; 0x2f
    2b8a:	3f c0       	rjmp	.+126    	; 0x2c0a <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2b8c:	69 a9       	ldd	r22, Y+49	; 0x31
    2b8e:	7a a9       	ldd	r23, Y+50	; 0x32
    2b90:	8b a9       	ldd	r24, Y+51	; 0x33
    2b92:	9c a9       	ldd	r25, Y+52	; 0x34
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	3f ef       	ldi	r19, 0xFF	; 255
    2b98:	4f e7       	ldi	r20, 0x7F	; 127
    2b9a:	57 e4       	ldi	r21, 0x47	; 71
    2b9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ba0:	18 16       	cp	r1, r24
    2ba2:	4c f5       	brge	.+82     	; 0x2bf6 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba4:	6d a9       	ldd	r22, Y+53	; 0x35
    2ba6:	7e a9       	ldd	r23, Y+54	; 0x36
    2ba8:	8f a9       	ldd	r24, Y+55	; 0x37
    2baa:	98 ad       	ldd	r25, Y+56	; 0x38
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e2       	ldi	r20, 0x20	; 32
    2bb2:	51 e4       	ldi	r21, 0x41	; 65
    2bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb8:	dc 01       	movw	r26, r24
    2bba:	cb 01       	movw	r24, r22
    2bbc:	bc 01       	movw	r22, r24
    2bbe:	cd 01       	movw	r24, r26
    2bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	98 ab       	std	Y+48, r25	; 0x30
    2bca:	8f a7       	std	Y+47, r24	; 0x2f
    2bcc:	0f c0       	rjmp	.+30     	; 0x2bec <LCD_displayCharacter+0x56a>
    2bce:	88 ec       	ldi	r24, 0xC8	; 200
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	9e a7       	std	Y+46, r25	; 0x2e
    2bd4:	8d a7       	std	Y+45, r24	; 0x2d
    2bd6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bd8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bda:	01 97       	sbiw	r24, 0x01	; 1
    2bdc:	f1 f7       	brne	.-4      	; 0x2bda <LCD_displayCharacter+0x558>
    2bde:	9e a7       	std	Y+46, r25	; 0x2e
    2be0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2be4:	98 a9       	ldd	r25, Y+48	; 0x30
    2be6:	01 97       	sbiw	r24, 0x01	; 1
    2be8:	98 ab       	std	Y+48, r25	; 0x30
    2bea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bec:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bee:	98 a9       	ldd	r25, Y+48	; 0x30
    2bf0:	00 97       	sbiw	r24, 0x00	; 0
    2bf2:	69 f7       	brne	.-38     	; 0x2bce <LCD_displayCharacter+0x54c>
    2bf4:	14 c0       	rjmp	.+40     	; 0x2c1e <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf6:	69 a9       	ldd	r22, Y+49	; 0x31
    2bf8:	7a a9       	ldd	r23, Y+50	; 0x32
    2bfa:	8b a9       	ldd	r24, Y+51	; 0x33
    2bfc:	9c a9       	ldd	r25, Y+52	; 0x34
    2bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c02:	dc 01       	movw	r26, r24
    2c04:	cb 01       	movw	r24, r22
    2c06:	98 ab       	std	Y+48, r25	; 0x30
    2c08:	8f a7       	std	Y+47, r24	; 0x2f
    2c0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c0c:	98 a9       	ldd	r25, Y+48	; 0x30
    2c0e:	9c a7       	std	Y+44, r25	; 0x2c
    2c10:	8b a7       	std	Y+43, r24	; 0x2b
    2c12:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c14:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	f1 f7       	brne	.-4      	; 0x2c16 <LCD_displayCharacter+0x594>
    2c1a:	9c a7       	std	Y+44, r25	; 0x2c
    2c1c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	62 e0       	ldi	r22, 0x02	; 2
    2c22:	41 e0       	ldi	r20, 0x01	; 1
    2c24:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
    2c28:	80 e0       	ldi	r24, 0x00	; 0
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	a0 e8       	ldi	r26, 0x80	; 128
    2c2e:	bf e3       	ldi	r27, 0x3F	; 63
    2c30:	8f a3       	std	Y+39, r24	; 0x27
    2c32:	98 a7       	std	Y+40, r25	; 0x28
    2c34:	a9 a7       	std	Y+41, r26	; 0x29
    2c36:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c38:	6f a1       	ldd	r22, Y+39	; 0x27
    2c3a:	78 a5       	ldd	r23, Y+40	; 0x28
    2c3c:	89 a5       	ldd	r24, Y+41	; 0x29
    2c3e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	4a ef       	ldi	r20, 0xFA	; 250
    2c46:	54 e4       	ldi	r21, 0x44	; 68
    2c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	8b a3       	std	Y+35, r24	; 0x23
    2c52:	9c a3       	std	Y+36, r25	; 0x24
    2c54:	ad a3       	std	Y+37, r26	; 0x25
    2c56:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c58:	6b a1       	ldd	r22, Y+35	; 0x23
    2c5a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c5c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c5e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	40 e8       	ldi	r20, 0x80	; 128
    2c66:	5f e3       	ldi	r21, 0x3F	; 63
    2c68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c6c:	88 23       	and	r24, r24
    2c6e:	2c f4       	brge	.+10     	; 0x2c7a <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	9a a3       	std	Y+34, r25	; 0x22
    2c76:	89 a3       	std	Y+33, r24	; 0x21
    2c78:	3f c0       	rjmp	.+126    	; 0x2cf8 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2c7a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c7c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c7e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c80:	9e a1       	ldd	r25, Y+38	; 0x26
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	3f ef       	ldi	r19, 0xFF	; 255
    2c86:	4f e7       	ldi	r20, 0x7F	; 127
    2c88:	57 e4       	ldi	r21, 0x47	; 71
    2c8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c8e:	18 16       	cp	r1, r24
    2c90:	4c f5       	brge	.+82     	; 0x2ce4 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c92:	6f a1       	ldd	r22, Y+39	; 0x27
    2c94:	78 a5       	ldd	r23, Y+40	; 0x28
    2c96:	89 a5       	ldd	r24, Y+41	; 0x29
    2c98:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c9a:	20 e0       	ldi	r18, 0x00	; 0
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	40 e2       	ldi	r20, 0x20	; 32
    2ca0:	51 e4       	ldi	r21, 0x41	; 65
    2ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	bc 01       	movw	r22, r24
    2cac:	cd 01       	movw	r24, r26
    2cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	9a a3       	std	Y+34, r25	; 0x22
    2cb8:	89 a3       	std	Y+33, r24	; 0x21
    2cba:	0f c0       	rjmp	.+30     	; 0x2cda <LCD_displayCharacter+0x658>
    2cbc:	88 ec       	ldi	r24, 0xC8	; 200
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	98 a3       	std	Y+32, r25	; 0x20
    2cc2:	8f 8f       	std	Y+31, r24	; 0x1f
    2cc4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cc6:	98 a1       	ldd	r25, Y+32	; 0x20
    2cc8:	01 97       	sbiw	r24, 0x01	; 1
    2cca:	f1 f7       	brne	.-4      	; 0x2cc8 <LCD_displayCharacter+0x646>
    2ccc:	98 a3       	std	Y+32, r25	; 0x20
    2cce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd0:	89 a1       	ldd	r24, Y+33	; 0x21
    2cd2:	9a a1       	ldd	r25, Y+34	; 0x22
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	9a a3       	std	Y+34, r25	; 0x22
    2cd8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cda:	89 a1       	ldd	r24, Y+33	; 0x21
    2cdc:	9a a1       	ldd	r25, Y+34	; 0x22
    2cde:	00 97       	sbiw	r24, 0x00	; 0
    2ce0:	69 f7       	brne	.-38     	; 0x2cbc <LCD_displayCharacter+0x63a>
    2ce2:	14 c0       	rjmp	.+40     	; 0x2d0c <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ce6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ce8:	8d a1       	ldd	r24, Y+37	; 0x25
    2cea:	9e a1       	ldd	r25, Y+38	; 0x26
    2cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	9a a3       	std	Y+34, r25	; 0x22
    2cf6:	89 a3       	std	Y+33, r24	; 0x21
    2cf8:	89 a1       	ldd	r24, Y+33	; 0x21
    2cfa:	9a a1       	ldd	r25, Y+34	; 0x22
    2cfc:	9e 8f       	std	Y+30, r25	; 0x1e
    2cfe:	8d 8f       	std	Y+29, r24	; 0x1d
    2d00:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d02:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	f1 f7       	brne	.-4      	; 0x2d04 <LCD_displayCharacter+0x682>
    2d08:	9e 8f       	std	Y+30, r25	; 0x1e
    2d0a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	ed 59       	subi	r30, 0x9D	; 157
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	80 81       	ld	r24, Z
    2d14:	98 2f       	mov	r25, r24
    2d16:	91 70       	andi	r25, 0x01	; 1
    2d18:	80 e0       	ldi	r24, 0x00	; 0
    2d1a:	63 e0       	ldi	r22, 0x03	; 3
    2d1c:	49 2f       	mov	r20, r25
    2d1e:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2d22:	fe 01       	movw	r30, r28
    2d24:	ed 59       	subi	r30, 0x9D	; 157
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	80 81       	ld	r24, Z
    2d2a:	88 2f       	mov	r24, r24
    2d2c:	90 e0       	ldi	r25, 0x00	; 0
    2d2e:	82 70       	andi	r24, 0x02	; 2
    2d30:	90 70       	andi	r25, 0x00	; 0
    2d32:	95 95       	asr	r25
    2d34:	87 95       	ror	r24
    2d36:	98 2f       	mov	r25, r24
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	64 e0       	ldi	r22, 0x04	; 4
    2d3c:	49 2f       	mov	r20, r25
    2d3e:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2d42:	fe 01       	movw	r30, r28
    2d44:	ed 59       	subi	r30, 0x9D	; 157
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	80 81       	ld	r24, Z
    2d4a:	88 2f       	mov	r24, r24
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	84 70       	andi	r24, 0x04	; 4
    2d50:	90 70       	andi	r25, 0x00	; 0
    2d52:	95 95       	asr	r25
    2d54:	87 95       	ror	r24
    2d56:	95 95       	asr	r25
    2d58:	87 95       	ror	r24
    2d5a:	98 2f       	mov	r25, r24
    2d5c:	80 e0       	ldi	r24, 0x00	; 0
    2d5e:	65 e0       	ldi	r22, 0x05	; 5
    2d60:	49 2f       	mov	r20, r25
    2d62:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2d66:	fe 01       	movw	r30, r28
    2d68:	ed 59       	subi	r30, 0x9D	; 157
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	80 81       	ld	r24, Z
    2d6e:	88 2f       	mov	r24, r24
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	88 70       	andi	r24, 0x08	; 8
    2d74:	90 70       	andi	r25, 0x00	; 0
    2d76:	95 95       	asr	r25
    2d78:	87 95       	ror	r24
    2d7a:	95 95       	asr	r25
    2d7c:	87 95       	ror	r24
    2d7e:	95 95       	asr	r25
    2d80:	87 95       	ror	r24
    2d82:	98 2f       	mov	r25, r24
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	66 e0       	ldi	r22, 0x06	; 6
    2d88:	49 2f       	mov	r20, r25
    2d8a:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	a0 e8       	ldi	r26, 0x80	; 128
    2d94:	bf e3       	ldi	r27, 0x3F	; 63
    2d96:	89 8f       	std	Y+25, r24	; 0x19
    2d98:	9a 8f       	std	Y+26, r25	; 0x1a
    2d9a:	ab 8f       	std	Y+27, r26	; 0x1b
    2d9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d9e:	69 8d       	ldd	r22, Y+25	; 0x19
    2da0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2da2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2da4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	4a ef       	ldi	r20, 0xFA	; 250
    2dac:	54 e4       	ldi	r21, 0x44	; 68
    2dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	8d 8b       	std	Y+21, r24	; 0x15
    2db8:	9e 8b       	std	Y+22, r25	; 0x16
    2dba:	af 8b       	std	Y+23, r26	; 0x17
    2dbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dbe:	6d 89       	ldd	r22, Y+21	; 0x15
    2dc0:	7e 89       	ldd	r23, Y+22	; 0x16
    2dc2:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc4:	98 8d       	ldd	r25, Y+24	; 0x18
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	40 e8       	ldi	r20, 0x80	; 128
    2dcc:	5f e3       	ldi	r21, 0x3F	; 63
    2dce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dd2:	88 23       	and	r24, r24
    2dd4:	2c f4       	brge	.+10     	; 0x2de0 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	9c 8b       	std	Y+20, r25	; 0x14
    2ddc:	8b 8b       	std	Y+19, r24	; 0x13
    2dde:	3f c0       	rjmp	.+126    	; 0x2e5e <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2de0:	6d 89       	ldd	r22, Y+21	; 0x15
    2de2:	7e 89       	ldd	r23, Y+22	; 0x16
    2de4:	8f 89       	ldd	r24, Y+23	; 0x17
    2de6:	98 8d       	ldd	r25, Y+24	; 0x18
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	3f ef       	ldi	r19, 0xFF	; 255
    2dec:	4f e7       	ldi	r20, 0x7F	; 127
    2dee:	57 e4       	ldi	r21, 0x47	; 71
    2df0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2df4:	18 16       	cp	r1, r24
    2df6:	4c f5       	brge	.+82     	; 0x2e4a <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df8:	69 8d       	ldd	r22, Y+25	; 0x19
    2dfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	40 e2       	ldi	r20, 0x20	; 32
    2e06:	51 e4       	ldi	r21, 0x41	; 65
    2e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	bc 01       	movw	r22, r24
    2e12:	cd 01       	movw	r24, r26
    2e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	9c 8b       	std	Y+20, r25	; 0x14
    2e1e:	8b 8b       	std	Y+19, r24	; 0x13
    2e20:	0f c0       	rjmp	.+30     	; 0x2e40 <LCD_displayCharacter+0x7be>
    2e22:	88 ec       	ldi	r24, 0xC8	; 200
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	9a 8b       	std	Y+18, r25	; 0x12
    2e28:	89 8b       	std	Y+17, r24	; 0x11
    2e2a:	89 89       	ldd	r24, Y+17	; 0x11
    2e2c:	9a 89       	ldd	r25, Y+18	; 0x12
    2e2e:	01 97       	sbiw	r24, 0x01	; 1
    2e30:	f1 f7       	brne	.-4      	; 0x2e2e <LCD_displayCharacter+0x7ac>
    2e32:	9a 8b       	std	Y+18, r25	; 0x12
    2e34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e36:	8b 89       	ldd	r24, Y+19	; 0x13
    2e38:	9c 89       	ldd	r25, Y+20	; 0x14
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	9c 8b       	std	Y+20, r25	; 0x14
    2e3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e40:	8b 89       	ldd	r24, Y+19	; 0x13
    2e42:	9c 89       	ldd	r25, Y+20	; 0x14
    2e44:	00 97       	sbiw	r24, 0x00	; 0
    2e46:	69 f7       	brne	.-38     	; 0x2e22 <LCD_displayCharacter+0x7a0>
    2e48:	14 c0       	rjmp	.+40     	; 0x2e72 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e4a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e4c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e50:	98 8d       	ldd	r25, Y+24	; 0x18
    2e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	9c 8b       	std	Y+20, r25	; 0x14
    2e5c:	8b 8b       	std	Y+19, r24	; 0x13
    2e5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e60:	9c 89       	ldd	r25, Y+20	; 0x14
    2e62:	98 8b       	std	Y+16, r25	; 0x10
    2e64:	8f 87       	std	Y+15, r24	; 0x0f
    2e66:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e68:	98 89       	ldd	r25, Y+16	; 0x10
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	f1 f7       	brne	.-4      	; 0x2e6a <LCD_displayCharacter+0x7e8>
    2e6e:	98 8b       	std	Y+16, r25	; 0x10
    2e70:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2e72:	80 e0       	ldi	r24, 0x00	; 0
    2e74:	62 e0       	ldi	r22, 0x02	; 2
    2e76:	40 e0       	ldi	r20, 0x00	; 0
    2e78:	0e 94 2d 0a 	call	0x145a	; 0x145a <GPIO_writePin>
    2e7c:	80 e0       	ldi	r24, 0x00	; 0
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	a0 e8       	ldi	r26, 0x80	; 128
    2e82:	bf e3       	ldi	r27, 0x3F	; 63
    2e84:	8b 87       	std	Y+11, r24	; 0x0b
    2e86:	9c 87       	std	Y+12, r25	; 0x0c
    2e88:	ad 87       	std	Y+13, r26	; 0x0d
    2e8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e92:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	4a ef       	ldi	r20, 0xFA	; 250
    2e9a:	54 e4       	ldi	r21, 0x44	; 68
    2e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	8f 83       	std	Y+7, r24	; 0x07
    2ea6:	98 87       	std	Y+8, r25	; 0x08
    2ea8:	a9 87       	std	Y+9, r26	; 0x09
    2eaa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eac:	6f 81       	ldd	r22, Y+7	; 0x07
    2eae:	78 85       	ldd	r23, Y+8	; 0x08
    2eb0:	89 85       	ldd	r24, Y+9	; 0x09
    2eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	40 e8       	ldi	r20, 0x80	; 128
    2eba:	5f e3       	ldi	r21, 0x3F	; 63
    2ebc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ec0:	88 23       	and	r24, r24
    2ec2:	2c f4       	brge	.+10     	; 0x2ece <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	9e 83       	std	Y+6, r25	; 0x06
    2eca:	8d 83       	std	Y+5, r24	; 0x05
    2ecc:	3f c0       	rjmp	.+126    	; 0x2f4c <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2ece:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed0:	78 85       	ldd	r23, Y+8	; 0x08
    2ed2:	89 85       	ldd	r24, Y+9	; 0x09
    2ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	3f ef       	ldi	r19, 0xFF	; 255
    2eda:	4f e7       	ldi	r20, 0x7F	; 127
    2edc:	57 e4       	ldi	r21, 0x47	; 71
    2ede:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ee2:	18 16       	cp	r1, r24
    2ee4:	4c f5       	brge	.+82     	; 0x2f38 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	40 e2       	ldi	r20, 0x20	; 32
    2ef4:	51 e4       	ldi	r21, 0x41	; 65
    2ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efa:	dc 01       	movw	r26, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	bc 01       	movw	r22, r24
    2f00:	cd 01       	movw	r24, r26
    2f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	9e 83       	std	Y+6, r25	; 0x06
    2f0c:	8d 83       	std	Y+5, r24	; 0x05
    2f0e:	0f c0       	rjmp	.+30     	; 0x2f2e <LCD_displayCharacter+0x8ac>
    2f10:	88 ec       	ldi	r24, 0xC8	; 200
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	9c 83       	std	Y+4, r25	; 0x04
    2f16:	8b 83       	std	Y+3, r24	; 0x03
    2f18:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1c:	01 97       	sbiw	r24, 0x01	; 1
    2f1e:	f1 f7       	brne	.-4      	; 0x2f1c <LCD_displayCharacter+0x89a>
    2f20:	9c 83       	std	Y+4, r25	; 0x04
    2f22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f24:	8d 81       	ldd	r24, Y+5	; 0x05
    2f26:	9e 81       	ldd	r25, Y+6	; 0x06
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	9e 83       	std	Y+6, r25	; 0x06
    2f2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f30:	9e 81       	ldd	r25, Y+6	; 0x06
    2f32:	00 97       	sbiw	r24, 0x00	; 0
    2f34:	69 f7       	brne	.-38     	; 0x2f10 <LCD_displayCharacter+0x88e>
    2f36:	14 c0       	rjmp	.+40     	; 0x2f60 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f38:	6f 81       	ldd	r22, Y+7	; 0x07
    2f3a:	78 85       	ldd	r23, Y+8	; 0x08
    2f3c:	89 85       	ldd	r24, Y+9	; 0x09
    2f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	9e 83       	std	Y+6, r25	; 0x06
    2f4a:	8d 83       	std	Y+5, r24	; 0x05
    2f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f50:	9a 83       	std	Y+2, r25	; 0x02
    2f52:	89 83       	std	Y+1, r24	; 0x01
    2f54:	89 81       	ldd	r24, Y+1	; 0x01
    2f56:	9a 81       	ldd	r25, Y+2	; 0x02
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	f1 f7       	brne	.-4      	; 0x2f58 <LCD_displayCharacter+0x8d6>
    2f5c:	9a 83       	std	Y+2, r25	; 0x02
    2f5e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2f60:	cd 59       	subi	r28, 0x9D	; 157
    2f62:	df 4f       	sbci	r29, 0xFF	; 255
    2f64:	0f b6       	in	r0, 0x3f	; 63
    2f66:	f8 94       	cli
    2f68:	de bf       	out	0x3e, r29	; 62
    2f6a:	0f be       	out	0x3f, r0	; 63
    2f6c:	cd bf       	out	0x3d, r28	; 61
    2f6e:	cf 91       	pop	r28
    2f70:	df 91       	pop	r29
    2f72:	1f 91       	pop	r17
    2f74:	0f 91       	pop	r16
    2f76:	08 95       	ret

00002f78 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2f78:	df 93       	push	r29
    2f7a:	cf 93       	push	r28
    2f7c:	00 d0       	rcall	.+0      	; 0x2f7e <LCD_displayString+0x6>
    2f7e:	0f 92       	push	r0
    2f80:	cd b7       	in	r28, 0x3d	; 61
    2f82:	de b7       	in	r29, 0x3e	; 62
    2f84:	9b 83       	std	Y+3, r25	; 0x03
    2f86:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f88:	19 82       	std	Y+1, r1	; 0x01
    2f8a:	0e c0       	rjmp	.+28     	; 0x2fa8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	28 2f       	mov	r18, r24
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	8a 81       	ldd	r24, Y+2	; 0x02
    2f94:	9b 81       	ldd	r25, Y+3	; 0x03
    2f96:	fc 01       	movw	r30, r24
    2f98:	e2 0f       	add	r30, r18
    2f9a:	f3 1f       	adc	r31, r19
    2f9c:	80 81       	ld	r24, Z
    2f9e:	0e 94 41 13 	call	0x2682	; 0x2682 <LCD_displayCharacter>
		i++;
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	8f 5f       	subi	r24, 0xFF	; 255
    2fa6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2fa8:	89 81       	ldd	r24, Y+1	; 0x01
    2faa:	28 2f       	mov	r18, r24
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	e2 0f       	add	r30, r18
    2fb6:	f3 1f       	adc	r31, r19
    2fb8:	80 81       	ld	r24, Z
    2fba:	88 23       	and	r24, r24
    2fbc:	39 f7       	brne	.-50     	; 0x2f8c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2fbe:	0f 90       	pop	r0
    2fc0:	0f 90       	pop	r0
    2fc2:	0f 90       	pop	r0
    2fc4:	cf 91       	pop	r28
    2fc6:	df 91       	pop	r29
    2fc8:	08 95       	ret

00002fca <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2fca:	df 93       	push	r29
    2fcc:	cf 93       	push	r28
    2fce:	00 d0       	rcall	.+0      	; 0x2fd0 <LCD_moveCursor+0x6>
    2fd0:	00 d0       	rcall	.+0      	; 0x2fd2 <LCD_moveCursor+0x8>
    2fd2:	0f 92       	push	r0
    2fd4:	cd b7       	in	r28, 0x3d	; 61
    2fd6:	de b7       	in	r29, 0x3e	; 62
    2fd8:	8a 83       	std	Y+2, r24	; 0x02
    2fda:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fde:	28 2f       	mov	r18, r24
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	3d 83       	std	Y+5, r19	; 0x05
    2fe4:	2c 83       	std	Y+4, r18	; 0x04
    2fe6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe8:	9d 81       	ldd	r25, Y+5	; 0x05
    2fea:	81 30       	cpi	r24, 0x01	; 1
    2fec:	91 05       	cpc	r25, r1
    2fee:	c1 f0       	breq	.+48     	; 0x3020 <LCD_moveCursor+0x56>
    2ff0:	2c 81       	ldd	r18, Y+4	; 0x04
    2ff2:	3d 81       	ldd	r19, Y+5	; 0x05
    2ff4:	22 30       	cpi	r18, 0x02	; 2
    2ff6:	31 05       	cpc	r19, r1
    2ff8:	2c f4       	brge	.+10     	; 0x3004 <LCD_moveCursor+0x3a>
    2ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    2ffc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ffe:	00 97       	sbiw	r24, 0x00	; 0
    3000:	61 f0       	breq	.+24     	; 0x301a <LCD_moveCursor+0x50>
    3002:	19 c0       	rjmp	.+50     	; 0x3036 <LCD_moveCursor+0x6c>
    3004:	2c 81       	ldd	r18, Y+4	; 0x04
    3006:	3d 81       	ldd	r19, Y+5	; 0x05
    3008:	22 30       	cpi	r18, 0x02	; 2
    300a:	31 05       	cpc	r19, r1
    300c:	69 f0       	breq	.+26     	; 0x3028 <LCD_moveCursor+0x5e>
    300e:	8c 81       	ldd	r24, Y+4	; 0x04
    3010:	9d 81       	ldd	r25, Y+5	; 0x05
    3012:	83 30       	cpi	r24, 0x03	; 3
    3014:	91 05       	cpc	r25, r1
    3016:	61 f0       	breq	.+24     	; 0x3030 <LCD_moveCursor+0x66>
    3018:	0e c0       	rjmp	.+28     	; 0x3036 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    301a:	8b 81       	ldd	r24, Y+3	; 0x03
    301c:	89 83       	std	Y+1, r24	; 0x01
    301e:	0b c0       	rjmp	.+22     	; 0x3036 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3020:	8b 81       	ldd	r24, Y+3	; 0x03
    3022:	80 5c       	subi	r24, 0xC0	; 192
    3024:	89 83       	std	Y+1, r24	; 0x01
    3026:	07 c0       	rjmp	.+14     	; 0x3036 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3028:	8b 81       	ldd	r24, Y+3	; 0x03
    302a:	80 5f       	subi	r24, 0xF0	; 240
    302c:	89 83       	std	Y+1, r24	; 0x01
    302e:	03 c0       	rjmp	.+6      	; 0x3036 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3030:	8b 81       	ldd	r24, Y+3	; 0x03
    3032:	80 5b       	subi	r24, 0xB0	; 176
    3034:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3036:	89 81       	ldd	r24, Y+1	; 0x01
    3038:	80 68       	ori	r24, 0x80	; 128
    303a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
}
    303e:	0f 90       	pop	r0
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	0f 90       	pop	r0
    3048:	cf 91       	pop	r28
    304a:	df 91       	pop	r29
    304c:	08 95       	ret

0000304e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    304e:	df 93       	push	r29
    3050:	cf 93       	push	r28
    3052:	00 d0       	rcall	.+0      	; 0x3054 <LCD_displayStringRowColumn+0x6>
    3054:	00 d0       	rcall	.+0      	; 0x3056 <LCD_displayStringRowColumn+0x8>
    3056:	cd b7       	in	r28, 0x3d	; 61
    3058:	de b7       	in	r29, 0x3e	; 62
    305a:	89 83       	std	Y+1, r24	; 0x01
    305c:	6a 83       	std	Y+2, r22	; 0x02
    305e:	5c 83       	std	Y+4, r21	; 0x04
    3060:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3062:	89 81       	ldd	r24, Y+1	; 0x01
    3064:	6a 81       	ldd	r22, Y+2	; 0x02
    3066:	0e 94 e5 17 	call	0x2fca	; 0x2fca <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    306a:	8b 81       	ldd	r24, Y+3	; 0x03
    306c:	9c 81       	ldd	r25, Y+4	; 0x04
    306e:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
}
    3072:	0f 90       	pop	r0
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	cf 91       	pop	r28
    307c:	df 91       	pop	r29
    307e:	08 95       	ret

00003080 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3080:	df 93       	push	r29
    3082:	cf 93       	push	r28
    3084:	cd b7       	in	r28, 0x3d	; 61
    3086:	de b7       	in	r29, 0x3e	; 62
    3088:	62 97       	sbiw	r28, 0x12	; 18
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	de bf       	out	0x3e, r29	; 62
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	9a 8b       	std	Y+18, r25	; 0x12
    3096:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3098:	89 89       	ldd	r24, Y+17	; 0x11
    309a:	9a 89       	ldd	r25, Y+18	; 0x12
    309c:	9e 01       	movw	r18, r28
    309e:	2f 5f       	subi	r18, 0xFF	; 255
    30a0:	3f 4f       	sbci	r19, 0xFF	; 255
    30a2:	b9 01       	movw	r22, r18
    30a4:	4a e0       	ldi	r20, 0x0A	; 10
    30a6:	50 e0       	ldi	r21, 0x00	; 0
    30a8:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <itoa>
   LCD_displayString(buff); /* Display the string */
    30ac:	ce 01       	movw	r24, r28
    30ae:	01 96       	adiw	r24, 0x01	; 1
    30b0:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <LCD_displayString>
}
    30b4:	62 96       	adiw	r28, 0x12	; 18
    30b6:	0f b6       	in	r0, 0x3f	; 63
    30b8:	f8 94       	cli
    30ba:	de bf       	out	0x3e, r29	; 62
    30bc:	0f be       	out	0x3f, r0	; 63
    30be:	cd bf       	out	0x3d, r28	; 61
    30c0:	cf 91       	pop	r28
    30c2:	df 91       	pop	r29
    30c4:	08 95       	ret

000030c6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    30c6:	df 93       	push	r29
    30c8:	cf 93       	push	r28
    30ca:	cd b7       	in	r28, 0x3d	; 61
    30cc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
}
    30d4:	cf 91       	pop	r28
    30d6:	df 91       	pop	r29
    30d8:	08 95       	ret

000030da <__vector_9>:
static volatile void (*g_callBackPtr)(void) = NULL_PTR;
/*******************************************************************************
 *                                ISR's                                        *
 *******************************************************************************/
ISR(TIMER1_OVF_vect)
{
    30da:	1f 92       	push	r1
    30dc:	0f 92       	push	r0
    30de:	0f b6       	in	r0, 0x3f	; 63
    30e0:	0f 92       	push	r0
    30e2:	11 24       	eor	r1, r1
    30e4:	2f 93       	push	r18
    30e6:	3f 93       	push	r19
    30e8:	4f 93       	push	r20
    30ea:	5f 93       	push	r21
    30ec:	6f 93       	push	r22
    30ee:	7f 93       	push	r23
    30f0:	8f 93       	push	r24
    30f2:	9f 93       	push	r25
    30f4:	af 93       	push	r26
    30f6:	bf 93       	push	r27
    30f8:	ef 93       	push	r30
    30fa:	ff 93       	push	r31
    30fc:	df 93       	push	r29
    30fe:	cf 93       	push	r28
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR) /* check if there is a call back function */
    3104:	80 91 f9 00 	lds	r24, 0x00F9
    3108:	90 91 fa 00 	lds	r25, 0x00FA
    310c:	00 97       	sbiw	r24, 0x00	; 0
    310e:	29 f0       	breq	.+10     	; 0x311a <__vector_9+0x40>
	{
		(*g_callBackPtr)(); /* call back function will be executed */
    3110:	e0 91 f9 00 	lds	r30, 0x00F9
    3114:	f0 91 fa 00 	lds	r31, 0x00FA
    3118:	09 95       	icall
	}
}
    311a:	cf 91       	pop	r28
    311c:	df 91       	pop	r29
    311e:	ff 91       	pop	r31
    3120:	ef 91       	pop	r30
    3122:	bf 91       	pop	r27
    3124:	af 91       	pop	r26
    3126:	9f 91       	pop	r25
    3128:	8f 91       	pop	r24
    312a:	7f 91       	pop	r23
    312c:	6f 91       	pop	r22
    312e:	5f 91       	pop	r21
    3130:	4f 91       	pop	r20
    3132:	3f 91       	pop	r19
    3134:	2f 91       	pop	r18
    3136:	0f 90       	pop	r0
    3138:	0f be       	out	0x3f, r0	; 63
    313a:	0f 90       	pop	r0
    313c:	1f 90       	pop	r1
    313e:	18 95       	reti

00003140 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    3140:	1f 92       	push	r1
    3142:	0f 92       	push	r0
    3144:	0f b6       	in	r0, 0x3f	; 63
    3146:	0f 92       	push	r0
    3148:	11 24       	eor	r1, r1
    314a:	2f 93       	push	r18
    314c:	3f 93       	push	r19
    314e:	4f 93       	push	r20
    3150:	5f 93       	push	r21
    3152:	6f 93       	push	r22
    3154:	7f 93       	push	r23
    3156:	8f 93       	push	r24
    3158:	9f 93       	push	r25
    315a:	af 93       	push	r26
    315c:	bf 93       	push	r27
    315e:	ef 93       	push	r30
    3160:	ff 93       	push	r31
    3162:	df 93       	push	r29
    3164:	cf 93       	push	r28
    3166:	cd b7       	in	r28, 0x3d	; 61
    3168:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR) /* check if there is a call back function */
    316a:	80 91 f9 00 	lds	r24, 0x00F9
    316e:	90 91 fa 00 	lds	r25, 0x00FA
    3172:	00 97       	sbiw	r24, 0x00	; 0
    3174:	29 f0       	breq	.+10     	; 0x3180 <__vector_7+0x40>
	{
		(*g_callBackPtr)(); /* call back function will be executed */
    3176:	e0 91 f9 00 	lds	r30, 0x00F9
    317a:	f0 91 fa 00 	lds	r31, 0x00FA
    317e:	09 95       	icall
	}
}
    3180:	cf 91       	pop	r28
    3182:	df 91       	pop	r29
    3184:	ff 91       	pop	r31
    3186:	ef 91       	pop	r30
    3188:	bf 91       	pop	r27
    318a:	af 91       	pop	r26
    318c:	9f 91       	pop	r25
    318e:	8f 91       	pop	r24
    3190:	7f 91       	pop	r23
    3192:	6f 91       	pop	r22
    3194:	5f 91       	pop	r21
    3196:	4f 91       	pop	r20
    3198:	3f 91       	pop	r19
    319a:	2f 91       	pop	r18
    319c:	0f 90       	pop	r0
    319e:	0f be       	out	0x3f, r0	; 63
    31a0:	0f 90       	pop	r0
    31a2:	1f 90       	pop	r1
    31a4:	18 95       	reti

000031a6 <TIMER1_init>:
/*
 * Description :
 * initialize the timer
 */
void TIMER1_init(const TIMER1_ConfigType * Config_Ptr)
{
    31a6:	df 93       	push	r29
    31a8:	cf 93       	push	r28
    31aa:	00 d0       	rcall	.+0      	; 0x31ac <TIMER1_init+0x6>
    31ac:	cd b7       	in	r28, 0x3d	; 61
    31ae:	de b7       	in	r29, 0x3e	; 62
    31b0:	9a 83       	std	Y+2, r25	; 0x02
    31b2:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initial_value; /* sets the initial counter register according to the value in the ConfigType structure */
    31b4:	ac e4       	ldi	r26, 0x4C	; 76
    31b6:	b0 e0       	ldi	r27, 0x00	; 0
    31b8:	e9 81       	ldd	r30, Y+1	; 0x01
    31ba:	fa 81       	ldd	r31, Y+2	; 0x02
    31bc:	80 81       	ld	r24, Z
    31be:	91 81       	ldd	r25, Z+1	; 0x01
    31c0:	11 96       	adiw	r26, 0x01	; 1
    31c2:	9c 93       	st	X, r25
    31c4:	8e 93       	st	-X, r24
	TCCR1A |= (1<<FOC1A) | (1<<FOC1B); /* enable for non-pwm mode */
    31c6:	af e4       	ldi	r26, 0x4F	; 79
    31c8:	b0 e0       	ldi	r27, 0x00	; 0
    31ca:	ef e4       	ldi	r30, 0x4F	; 79
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	80 81       	ld	r24, Z
    31d0:	8c 60       	ori	r24, 0x0C	; 12
    31d2:	8c 93       	st	X, r24
	TCCR1B = ( TCCR1B & 0xF7 ) | ( ( Config_Ptr->mode & 0x01 ) << WGM12 ); /* will set the bits responsible for the timer mode */
    31d4:	ae e4       	ldi	r26, 0x4E	; 78
    31d6:	b0 e0       	ldi	r27, 0x00	; 0
    31d8:	ee e4       	ldi	r30, 0x4E	; 78
    31da:	f0 e0       	ldi	r31, 0x00	; 0
    31dc:	80 81       	ld	r24, Z
    31de:	28 2f       	mov	r18, r24
    31e0:	27 7f       	andi	r18, 0xF7	; 247
    31e2:	e9 81       	ldd	r30, Y+1	; 0x01
    31e4:	fa 81       	ldd	r31, Y+2	; 0x02
    31e6:	85 81       	ldd	r24, Z+5	; 0x05
    31e8:	88 2f       	mov	r24, r24
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	81 70       	andi	r24, 0x01	; 1
    31ee:	90 70       	andi	r25, 0x00	; 0
    31f0:	88 0f       	add	r24, r24
    31f2:	99 1f       	adc	r25, r25
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	88 0f       	add	r24, r24
    31fa:	99 1f       	adc	r25, r25
    31fc:	82 2b       	or	r24, r18
    31fe:	8c 93       	st	X, r24
	TCCR1B = ( TCCR1B & 0xF8 ) | ( Config_Ptr->prescaler & 0x07 ) ; /* will set the bits responsible for the prescaler */
    3200:	ae e4       	ldi	r26, 0x4E	; 78
    3202:	b0 e0       	ldi	r27, 0x00	; 0
    3204:	ee e4       	ldi	r30, 0x4E	; 78
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	80 81       	ld	r24, Z
    320a:	98 2f       	mov	r25, r24
    320c:	98 7f       	andi	r25, 0xF8	; 248
    320e:	e9 81       	ldd	r30, Y+1	; 0x01
    3210:	fa 81       	ldd	r31, Y+2	; 0x02
    3212:	84 81       	ldd	r24, Z+4	; 0x04
    3214:	87 70       	andi	r24, 0x07	; 7
    3216:	89 2b       	or	r24, r25
    3218:	8c 93       	st	X, r24

	if ( Config_Ptr->mode == COMPARE)
    321a:	e9 81       	ldd	r30, Y+1	; 0x01
    321c:	fa 81       	ldd	r31, Y+2	; 0x02
    321e:	85 81       	ldd	r24, Z+5	; 0x05
    3220:	81 30       	cpi	r24, 0x01	; 1
    3222:	71 f4       	brne	.+28     	; 0x3240 <TIMER1_init+0x9a>
	{
		OCR1A = Config_Ptr->compare_value; /* sets the compare value if compare mode is set */
    3224:	aa e4       	ldi	r26, 0x4A	; 74
    3226:	b0 e0       	ldi	r27, 0x00	; 0
    3228:	e9 81       	ldd	r30, Y+1	; 0x01
    322a:	fa 81       	ldd	r31, Y+2	; 0x02
    322c:	82 81       	ldd	r24, Z+2	; 0x02
    322e:	93 81       	ldd	r25, Z+3	; 0x03
    3230:	11 96       	adiw	r26, 0x01	; 1
    3232:	9c 93       	st	X, r25
    3234:	8e 93       	st	-X, r24
		TIMSK= (1<<OCIE1A); /* enable the compare mode interrupt */
    3236:	e9 e5       	ldi	r30, 0x59	; 89
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	80 e1       	ldi	r24, 0x10	; 16
    323c:	80 83       	st	Z, r24
    323e:	04 c0       	rjmp	.+8      	; 0x3248 <TIMER1_init+0xa2>
	}
	else
	{
		TIMSK = (1<<TOIE1); /* enable the overflow mode interrupt */
    3240:	e9 e5       	ldi	r30, 0x59	; 89
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	84 e0       	ldi	r24, 0x04	; 4
    3246:	80 83       	st	Z, r24
	}
}
    3248:	0f 90       	pop	r0
    324a:	0f 90       	pop	r0
    324c:	cf 91       	pop	r28
    324e:	df 91       	pop	r29
    3250:	08 95       	ret

00003252 <TIMER1_deinit>:
/*
 * Description :
 * Stop and clear the timer settings
 */
void TIMER1_deinit(void)
{
    3252:	df 93       	push	r29
    3254:	cf 93       	push	r28
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    325a:	ef e4       	ldi	r30, 0x4F	; 79
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	10 82       	st	Z, r1
	TCCR1B = 0;
    3260:	ee e4       	ldi	r30, 0x4E	; 78
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	10 82       	st	Z, r1
	TCNT1 = 0;
    3266:	ec e4       	ldi	r30, 0x4C	; 76
    3268:	f0 e0       	ldi	r31, 0x00	; 0
    326a:	11 82       	std	Z+1, r1	; 0x01
    326c:	10 82       	st	Z, r1
	OCR1A = 0;
    326e:	ea e4       	ldi	r30, 0x4A	; 74
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	11 82       	std	Z+1, r1	; 0x01
    3274:	10 82       	st	Z, r1

	/* Disable the compare and overflow interrupt */
	TIMSK &= ~(1<<OCIE1A) & ~(1<<TOIE1);
    3276:	a9 e5       	ldi	r26, 0x59	; 89
    3278:	b0 e0       	ldi	r27, 0x00	; 0
    327a:	e9 e5       	ldi	r30, 0x59	; 89
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	80 81       	ld	r24, Z
    3280:	8b 7e       	andi	r24, 0xEB	; 235
    3282:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    3284:	10 92 fa 00 	sts	0x00FA, r1
    3288:	10 92 f9 00 	sts	0x00F9, r1
}
    328c:	cf 91       	pop	r28
    328e:	df 91       	pop	r29
    3290:	08 95       	ret

00003292 <TIMER1_setCallBack>:
/*
 * Description :
 * Sets the call back function which will be executed every interrupt
 */
void TIMER1_setCallBack(void(*a_ptr)(void))
{
    3292:	df 93       	push	r29
    3294:	cf 93       	push	r28
    3296:	00 d0       	rcall	.+0      	; 0x3298 <TIMER1_setCallBack+0x6>
    3298:	cd b7       	in	r28, 0x3d	; 61
    329a:	de b7       	in	r29, 0x3e	; 62
    329c:	9a 83       	std	Y+2, r25	; 0x02
    329e:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	9a 81       	ldd	r25, Y+2	; 0x02
    32a4:	90 93 fa 00 	sts	0x00FA, r25
    32a8:	80 93 f9 00 	sts	0x00F9, r24
}
    32ac:	0f 90       	pop	r0
    32ae:	0f 90       	pop	r0
    32b0:	cf 91       	pop	r28
    32b2:	df 91       	pop	r29
    32b4:	08 95       	ret

000032b6 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits through the UART_ConfigType structure.
 * 2- Pass the structure to the init function
 * 2. Enable the UART.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    32b6:	df 93       	push	r29
    32b8:	cf 93       	push	r28
    32ba:	00 d0       	rcall	.+0      	; 0x32bc <UART_init+0x6>
    32bc:	00 d0       	rcall	.+0      	; 0x32be <UART_init+0x8>
    32be:	cd b7       	in	r28, 0x3d	; 61
    32c0:	de b7       	in	r29, 0x3e	; 62
    32c2:	9c 83       	std	Y+4, r25	; 0x04
    32c4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    32c6:	1a 82       	std	Y+2, r1	; 0x02
    32c8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    32ca:	eb e2       	ldi	r30, 0x2B	; 43
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	82 e0       	ldi	r24, 0x02	; 2
    32d0:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    32d2:	ea e2       	ldi	r30, 0x2A	; 42
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	88 e1       	ldi	r24, 0x18	; 24
    32d8:	80 83       	st	Z, r24
	 * UPM1:0  = Parity settings will be set according to config structure in the main function
	 * USBS    = StopBit will be set according to config structure in the main function
	 * UCSZ1:0 = character size will be set according to config structure in the main function
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    32da:	e0 e4       	ldi	r30, 0x40	; 64
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	80 e8       	ldi	r24, 0x80	; 128
    32e0:	80 83       	st	Z, r24
	/* this line of code will only change the 2 bits responsible for the partiy mode */
	UCSRC = ( UCSRC & 0xCF ) | ( (Config_Ptr->parity & 0x03)<<4  );
    32e2:	a0 e4       	ldi	r26, 0x40	; 64
    32e4:	b0 e0       	ldi	r27, 0x00	; 0
    32e6:	e0 e4       	ldi	r30, 0x40	; 64
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	80 81       	ld	r24, Z
    32ec:	28 2f       	mov	r18, r24
    32ee:	2f 7c       	andi	r18, 0xCF	; 207
    32f0:	eb 81       	ldd	r30, Y+3	; 0x03
    32f2:	fc 81       	ldd	r31, Y+4	; 0x04
    32f4:	84 81       	ldd	r24, Z+4	; 0x04
    32f6:	88 2f       	mov	r24, r24
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	83 70       	andi	r24, 0x03	; 3
    32fc:	90 70       	andi	r25, 0x00	; 0
    32fe:	82 95       	swap	r24
    3300:	92 95       	swap	r25
    3302:	90 7f       	andi	r25, 0xF0	; 240
    3304:	98 27       	eor	r25, r24
    3306:	80 7f       	andi	r24, 0xF0	; 240
    3308:	98 27       	eor	r25, r24
    330a:	82 2b       	or	r24, r18
    330c:	8c 93       	st	X, r24
	/* this line of code will only change the bit responsible for the stop bit mode */
	UCSRC = ( UCSRC & 0xF7 ) | ( (Config_Ptr->stopbit & 0x01)<<3 );
    330e:	a0 e4       	ldi	r26, 0x40	; 64
    3310:	b0 e0       	ldi	r27, 0x00	; 0
    3312:	e0 e4       	ldi	r30, 0x40	; 64
    3314:	f0 e0       	ldi	r31, 0x00	; 0
    3316:	80 81       	ld	r24, Z
    3318:	28 2f       	mov	r18, r24
    331a:	27 7f       	andi	r18, 0xF7	; 247
    331c:	eb 81       	ldd	r30, Y+3	; 0x03
    331e:	fc 81       	ldd	r31, Y+4	; 0x04
    3320:	85 81       	ldd	r24, Z+5	; 0x05
    3322:	88 2f       	mov	r24, r24
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	81 70       	andi	r24, 0x01	; 1
    3328:	90 70       	andi	r25, 0x00	; 0
    332a:	88 0f       	add	r24, r24
    332c:	99 1f       	adc	r25, r25
    332e:	88 0f       	add	r24, r24
    3330:	99 1f       	adc	r25, r25
    3332:	88 0f       	add	r24, r24
    3334:	99 1f       	adc	r25, r25
    3336:	82 2b       	or	r24, r18
    3338:	8c 93       	st	X, r24
	/* the following lines of code will only change the bits responsible for the character size */
	UCSRC = ( UCSRC & 0xF9 ) | ( (Config_Ptr->datasize & 0x03)<<1 );
    333a:	a0 e4       	ldi	r26, 0x40	; 64
    333c:	b0 e0       	ldi	r27, 0x00	; 0
    333e:	e0 e4       	ldi	r30, 0x40	; 64
    3340:	f0 e0       	ldi	r31, 0x00	; 0
    3342:	80 81       	ld	r24, Z
    3344:	28 2f       	mov	r18, r24
    3346:	29 7f       	andi	r18, 0xF9	; 249
    3348:	eb 81       	ldd	r30, Y+3	; 0x03
    334a:	fc 81       	ldd	r31, Y+4	; 0x04
    334c:	86 81       	ldd	r24, Z+6	; 0x06
    334e:	88 2f       	mov	r24, r24
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	83 70       	andi	r24, 0x03	; 3
    3354:	90 70       	andi	r25, 0x00	; 0
    3356:	88 0f       	add	r24, r24
    3358:	99 1f       	adc	r25, r25
    335a:	82 2b       	or	r24, r18
    335c:	8c 93       	st	X, r24
	if ( Config_Ptr->datasize == NINE_BIT )
    335e:	eb 81       	ldd	r30, Y+3	; 0x03
    3360:	fc 81       	ldd	r31, Y+4	; 0x04
    3362:	86 81       	ldd	r24, Z+6	; 0x06
    3364:	87 30       	cpi	r24, 0x07	; 7
    3366:	41 f4       	brne	.+16     	; 0x3378 <UART_init+0xc2>
	{
		SET_BIT(UCSRB,UCSZ2);
    3368:	aa e2       	ldi	r26, 0x2A	; 42
    336a:	b0 e0       	ldi	r27, 0x00	; 0
    336c:	ea e2       	ldi	r30, 0x2A	; 42
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	84 60       	ori	r24, 0x04	; 4
    3374:	8c 93       	st	X, r24
    3376:	07 c0       	rjmp	.+14     	; 0x3386 <UART_init+0xd0>
	}
	else
	{
		CLEAR_BIT(UCSRB,UCSZ2);
    3378:	aa e2       	ldi	r26, 0x2A	; 42
    337a:	b0 e0       	ldi	r27, 0x00	; 0
    337c:	ea e2       	ldi	r30, 0x2A	; 42
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	80 81       	ld	r24, Z
    3382:	8b 7f       	andi	r24, 0xFB	; 251
    3384:	8c 93       	st	X, r24
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)((( F_CPU / (Config_Ptr->baudrate * 8UL))) - 1 );
    3386:	eb 81       	ldd	r30, Y+3	; 0x03
    3388:	fc 81       	ldd	r31, Y+4	; 0x04
    338a:	80 81       	ld	r24, Z
    338c:	91 81       	ldd	r25, Z+1	; 0x01
    338e:	a2 81       	ldd	r26, Z+2	; 0x02
    3390:	b3 81       	ldd	r27, Z+3	; 0x03
    3392:	88 0f       	add	r24, r24
    3394:	99 1f       	adc	r25, r25
    3396:	aa 1f       	adc	r26, r26
    3398:	bb 1f       	adc	r27, r27
    339a:	88 0f       	add	r24, r24
    339c:	99 1f       	adc	r25, r25
    339e:	aa 1f       	adc	r26, r26
    33a0:	bb 1f       	adc	r27, r27
    33a2:	88 0f       	add	r24, r24
    33a4:	99 1f       	adc	r25, r25
    33a6:	aa 1f       	adc	r26, r26
    33a8:	bb 1f       	adc	r27, r27
    33aa:	9c 01       	movw	r18, r24
    33ac:	ad 01       	movw	r20, r26
    33ae:	80 e0       	ldi	r24, 0x00	; 0
    33b0:	92 e1       	ldi	r25, 0x12	; 18
    33b2:	aa e7       	ldi	r26, 0x7A	; 122
    33b4:	b0 e0       	ldi	r27, 0x00	; 0
    33b6:	bc 01       	movw	r22, r24
    33b8:	cd 01       	movw	r24, r26
    33ba:	0e 94 88 1a 	call	0x3510	; 0x3510 <__udivmodsi4>
    33be:	da 01       	movw	r26, r20
    33c0:	c9 01       	movw	r24, r18
    33c2:	01 97       	sbiw	r24, 0x01	; 1
    33c4:	9a 83       	std	Y+2, r25	; 0x02
    33c6:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    33c8:	e0 e4       	ldi	r30, 0x40	; 64
    33ca:	f0 e0       	ldi	r31, 0x00	; 0
    33cc:	89 81       	ldd	r24, Y+1	; 0x01
    33ce:	9a 81       	ldd	r25, Y+2	; 0x02
    33d0:	89 2f       	mov	r24, r25
    33d2:	99 27       	eor	r25, r25
    33d4:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    33d6:	e9 e2       	ldi	r30, 0x29	; 41
    33d8:	f0 e0       	ldi	r31, 0x00	; 0
    33da:	89 81       	ldd	r24, Y+1	; 0x01
    33dc:	80 83       	st	Z, r24
}
    33de:	0f 90       	pop	r0
    33e0:	0f 90       	pop	r0
    33e2:	0f 90       	pop	r0
    33e4:	0f 90       	pop	r0
    33e6:	cf 91       	pop	r28
    33e8:	df 91       	pop	r29
    33ea:	08 95       	ret

000033ec <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    33ec:	df 93       	push	r29
    33ee:	cf 93       	push	r28
    33f0:	0f 92       	push	r0
    33f2:	cd b7       	in	r28, 0x3d	; 61
    33f4:	de b7       	in	r29, 0x3e	; 62
    33f6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    33f8:	eb e2       	ldi	r30, 0x2B	; 43
    33fa:	f0 e0       	ldi	r31, 0x00	; 0
    33fc:	80 81       	ld	r24, Z
    33fe:	88 2f       	mov	r24, r24
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	80 72       	andi	r24, 0x20	; 32
    3404:	90 70       	andi	r25, 0x00	; 0
    3406:	00 97       	sbiw	r24, 0x00	; 0
    3408:	b9 f3       	breq	.-18     	; 0x33f8 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    340a:	ec e2       	ldi	r30, 0x2C	; 44
    340c:	f0 e0       	ldi	r31, 0x00	; 0
    340e:	89 81       	ldd	r24, Y+1	; 0x01
    3410:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3412:	0f 90       	pop	r0
    3414:	cf 91       	pop	r28
    3416:	df 91       	pop	r29
    3418:	08 95       	ret

0000341a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    341a:	df 93       	push	r29
    341c:	cf 93       	push	r28
    341e:	cd b7       	in	r28, 0x3d	; 61
    3420:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3422:	eb e2       	ldi	r30, 0x2B	; 43
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	80 81       	ld	r24, Z
    3428:	88 23       	and	r24, r24
    342a:	dc f7       	brge	.-10     	; 0x3422 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    342c:	ec e2       	ldi	r30, 0x2C	; 44
    342e:	f0 e0       	ldi	r31, 0x00	; 0
    3430:	80 81       	ld	r24, Z
}
    3432:	cf 91       	pop	r28
    3434:	df 91       	pop	r29
    3436:	08 95       	ret

00003438 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3438:	df 93       	push	r29
    343a:	cf 93       	push	r28
    343c:	00 d0       	rcall	.+0      	; 0x343e <UART_sendString+0x6>
    343e:	0f 92       	push	r0
    3440:	cd b7       	in	r28, 0x3d	; 61
    3442:	de b7       	in	r29, 0x3e	; 62
    3444:	9b 83       	std	Y+3, r25	; 0x03
    3446:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3448:	19 82       	std	Y+1, r1	; 0x01
    344a:	0e c0       	rjmp	.+28     	; 0x3468 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    344c:	89 81       	ldd	r24, Y+1	; 0x01
    344e:	28 2f       	mov	r18, r24
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	8a 81       	ldd	r24, Y+2	; 0x02
    3454:	9b 81       	ldd	r25, Y+3	; 0x03
    3456:	fc 01       	movw	r30, r24
    3458:	e2 0f       	add	r30, r18
    345a:	f3 1f       	adc	r31, r19
    345c:	80 81       	ld	r24, Z
    345e:	0e 94 f6 19 	call	0x33ec	; 0x33ec <UART_sendByte>
		i++;
    3462:	89 81       	ldd	r24, Y+1	; 0x01
    3464:	8f 5f       	subi	r24, 0xFF	; 255
    3466:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3468:	89 81       	ldd	r24, Y+1	; 0x01
    346a:	28 2f       	mov	r18, r24
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	8a 81       	ldd	r24, Y+2	; 0x02
    3470:	9b 81       	ldd	r25, Y+3	; 0x03
    3472:	fc 01       	movw	r30, r24
    3474:	e2 0f       	add	r30, r18
    3476:	f3 1f       	adc	r31, r19
    3478:	80 81       	ld	r24, Z
    347a:	88 23       	and	r24, r24
    347c:	39 f7       	brne	.-50     	; 0x344c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    347e:	0f 90       	pop	r0
    3480:	0f 90       	pop	r0
    3482:	0f 90       	pop	r0
    3484:	cf 91       	pop	r28
    3486:	df 91       	pop	r29
    3488:	08 95       	ret

0000348a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    348a:	0f 93       	push	r16
    348c:	1f 93       	push	r17
    348e:	df 93       	push	r29
    3490:	cf 93       	push	r28
    3492:	00 d0       	rcall	.+0      	; 0x3494 <UART_receiveString+0xa>
    3494:	0f 92       	push	r0
    3496:	cd b7       	in	r28, 0x3d	; 61
    3498:	de b7       	in	r29, 0x3e	; 62
    349a:	9b 83       	std	Y+3, r25	; 0x03
    349c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    349e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    34a0:	89 81       	ldd	r24, Y+1	; 0x01
    34a2:	28 2f       	mov	r18, r24
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	8a 81       	ldd	r24, Y+2	; 0x02
    34a8:	9b 81       	ldd	r25, Y+3	; 0x03
    34aa:	8c 01       	movw	r16, r24
    34ac:	02 0f       	add	r16, r18
    34ae:	13 1f       	adc	r17, r19
    34b0:	0e 94 0d 1a 	call	0x341a	; 0x341a <UART_recieveByte>
    34b4:	f8 01       	movw	r30, r16
    34b6:	80 83       	st	Z, r24
    34b8:	0f c0       	rjmp	.+30     	; 0x34d8 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    34ba:	89 81       	ldd	r24, Y+1	; 0x01
    34bc:	8f 5f       	subi	r24, 0xFF	; 255
    34be:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    34c0:	89 81       	ldd	r24, Y+1	; 0x01
    34c2:	28 2f       	mov	r18, r24
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	8a 81       	ldd	r24, Y+2	; 0x02
    34c8:	9b 81       	ldd	r25, Y+3	; 0x03
    34ca:	8c 01       	movw	r16, r24
    34cc:	02 0f       	add	r16, r18
    34ce:	13 1f       	adc	r17, r19
    34d0:	0e 94 0d 1a 	call	0x341a	; 0x341a <UART_recieveByte>
    34d4:	f8 01       	movw	r30, r16
    34d6:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
    34da:	28 2f       	mov	r18, r24
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	8a 81       	ldd	r24, Y+2	; 0x02
    34e0:	9b 81       	ldd	r25, Y+3	; 0x03
    34e2:	fc 01       	movw	r30, r24
    34e4:	e2 0f       	add	r30, r18
    34e6:	f3 1f       	adc	r31, r19
    34e8:	80 81       	ld	r24, Z
    34ea:	83 32       	cpi	r24, 0x23	; 35
    34ec:	31 f7       	brne	.-52     	; 0x34ba <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    34ee:	89 81       	ldd	r24, Y+1	; 0x01
    34f0:	28 2f       	mov	r18, r24
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	8a 81       	ldd	r24, Y+2	; 0x02
    34f6:	9b 81       	ldd	r25, Y+3	; 0x03
    34f8:	fc 01       	movw	r30, r24
    34fa:	e2 0f       	add	r30, r18
    34fc:	f3 1f       	adc	r31, r19
    34fe:	10 82       	st	Z, r1
}
    3500:	0f 90       	pop	r0
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	cf 91       	pop	r28
    3508:	df 91       	pop	r29
    350a:	1f 91       	pop	r17
    350c:	0f 91       	pop	r16
    350e:	08 95       	ret

00003510 <__udivmodsi4>:
    3510:	a1 e2       	ldi	r26, 0x21	; 33
    3512:	1a 2e       	mov	r1, r26
    3514:	aa 1b       	sub	r26, r26
    3516:	bb 1b       	sub	r27, r27
    3518:	fd 01       	movw	r30, r26
    351a:	0d c0       	rjmp	.+26     	; 0x3536 <__udivmodsi4_ep>

0000351c <__udivmodsi4_loop>:
    351c:	aa 1f       	adc	r26, r26
    351e:	bb 1f       	adc	r27, r27
    3520:	ee 1f       	adc	r30, r30
    3522:	ff 1f       	adc	r31, r31
    3524:	a2 17       	cp	r26, r18
    3526:	b3 07       	cpc	r27, r19
    3528:	e4 07       	cpc	r30, r20
    352a:	f5 07       	cpc	r31, r21
    352c:	20 f0       	brcs	.+8      	; 0x3536 <__udivmodsi4_ep>
    352e:	a2 1b       	sub	r26, r18
    3530:	b3 0b       	sbc	r27, r19
    3532:	e4 0b       	sbc	r30, r20
    3534:	f5 0b       	sbc	r31, r21

00003536 <__udivmodsi4_ep>:
    3536:	66 1f       	adc	r22, r22
    3538:	77 1f       	adc	r23, r23
    353a:	88 1f       	adc	r24, r24
    353c:	99 1f       	adc	r25, r25
    353e:	1a 94       	dec	r1
    3540:	69 f7       	brne	.-38     	; 0x351c <__udivmodsi4_loop>
    3542:	60 95       	com	r22
    3544:	70 95       	com	r23
    3546:	80 95       	com	r24
    3548:	90 95       	com	r25
    354a:	9b 01       	movw	r18, r22
    354c:	ac 01       	movw	r20, r24
    354e:	bd 01       	movw	r22, r26
    3550:	cf 01       	movw	r24, r30
    3552:	08 95       	ret

00003554 <__prologue_saves__>:
    3554:	2f 92       	push	r2
    3556:	3f 92       	push	r3
    3558:	4f 92       	push	r4
    355a:	5f 92       	push	r5
    355c:	6f 92       	push	r6
    355e:	7f 92       	push	r7
    3560:	8f 92       	push	r8
    3562:	9f 92       	push	r9
    3564:	af 92       	push	r10
    3566:	bf 92       	push	r11
    3568:	cf 92       	push	r12
    356a:	df 92       	push	r13
    356c:	ef 92       	push	r14
    356e:	ff 92       	push	r15
    3570:	0f 93       	push	r16
    3572:	1f 93       	push	r17
    3574:	cf 93       	push	r28
    3576:	df 93       	push	r29
    3578:	cd b7       	in	r28, 0x3d	; 61
    357a:	de b7       	in	r29, 0x3e	; 62
    357c:	ca 1b       	sub	r28, r26
    357e:	db 0b       	sbc	r29, r27
    3580:	0f b6       	in	r0, 0x3f	; 63
    3582:	f8 94       	cli
    3584:	de bf       	out	0x3e, r29	; 62
    3586:	0f be       	out	0x3f, r0	; 63
    3588:	cd bf       	out	0x3d, r28	; 61
    358a:	09 94       	ijmp

0000358c <__epilogue_restores__>:
    358c:	2a 88       	ldd	r2, Y+18	; 0x12
    358e:	39 88       	ldd	r3, Y+17	; 0x11
    3590:	48 88       	ldd	r4, Y+16	; 0x10
    3592:	5f 84       	ldd	r5, Y+15	; 0x0f
    3594:	6e 84       	ldd	r6, Y+14	; 0x0e
    3596:	7d 84       	ldd	r7, Y+13	; 0x0d
    3598:	8c 84       	ldd	r8, Y+12	; 0x0c
    359a:	9b 84       	ldd	r9, Y+11	; 0x0b
    359c:	aa 84       	ldd	r10, Y+10	; 0x0a
    359e:	b9 84       	ldd	r11, Y+9	; 0x09
    35a0:	c8 84       	ldd	r12, Y+8	; 0x08
    35a2:	df 80       	ldd	r13, Y+7	; 0x07
    35a4:	ee 80       	ldd	r14, Y+6	; 0x06
    35a6:	fd 80       	ldd	r15, Y+5	; 0x05
    35a8:	0c 81       	ldd	r16, Y+4	; 0x04
    35aa:	1b 81       	ldd	r17, Y+3	; 0x03
    35ac:	aa 81       	ldd	r26, Y+2	; 0x02
    35ae:	b9 81       	ldd	r27, Y+1	; 0x01
    35b0:	ce 0f       	add	r28, r30
    35b2:	d1 1d       	adc	r29, r1
    35b4:	0f b6       	in	r0, 0x3f	; 63
    35b6:	f8 94       	cli
    35b8:	de bf       	out	0x3e, r29	; 62
    35ba:	0f be       	out	0x3f, r0	; 63
    35bc:	cd bf       	out	0x3d, r28	; 61
    35be:	ed 01       	movw	r28, r26
    35c0:	08 95       	ret

000035c2 <itoa>:
    35c2:	fb 01       	movw	r30, r22
    35c4:	9f 01       	movw	r18, r30
    35c6:	e8 94       	clt
    35c8:	42 30       	cpi	r20, 0x02	; 2
    35ca:	c4 f0       	brlt	.+48     	; 0x35fc <itoa+0x3a>
    35cc:	45 32       	cpi	r20, 0x25	; 37
    35ce:	b4 f4       	brge	.+44     	; 0x35fc <itoa+0x3a>
    35d0:	4a 30       	cpi	r20, 0x0A	; 10
    35d2:	29 f4       	brne	.+10     	; 0x35de <itoa+0x1c>
    35d4:	97 fb       	bst	r25, 7
    35d6:	1e f4       	brtc	.+6      	; 0x35de <itoa+0x1c>
    35d8:	90 95       	com	r25
    35da:	81 95       	neg	r24
    35dc:	9f 4f       	sbci	r25, 0xFF	; 255
    35de:	64 2f       	mov	r22, r20
    35e0:	77 27       	eor	r23, r23
    35e2:	0e 94 12 1b 	call	0x3624	; 0x3624 <__udivmodhi4>
    35e6:	80 5d       	subi	r24, 0xD0	; 208
    35e8:	8a 33       	cpi	r24, 0x3A	; 58
    35ea:	0c f0       	brlt	.+2      	; 0x35ee <itoa+0x2c>
    35ec:	89 5d       	subi	r24, 0xD9	; 217
    35ee:	81 93       	st	Z+, r24
    35f0:	cb 01       	movw	r24, r22
    35f2:	00 97       	sbiw	r24, 0x00	; 0
    35f4:	a1 f7       	brne	.-24     	; 0x35de <itoa+0x1c>
    35f6:	16 f4       	brtc	.+4      	; 0x35fc <itoa+0x3a>
    35f8:	5d e2       	ldi	r21, 0x2D	; 45
    35fa:	51 93       	st	Z+, r21
    35fc:	10 82       	st	Z, r1
    35fe:	c9 01       	movw	r24, r18
    3600:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <strrev>

00003604 <strrev>:
    3604:	dc 01       	movw	r26, r24
    3606:	fc 01       	movw	r30, r24
    3608:	67 2f       	mov	r22, r23
    360a:	71 91       	ld	r23, Z+
    360c:	77 23       	and	r23, r23
    360e:	e1 f7       	brne	.-8      	; 0x3608 <strrev+0x4>
    3610:	32 97       	sbiw	r30, 0x02	; 2
    3612:	04 c0       	rjmp	.+8      	; 0x361c <strrev+0x18>
    3614:	7c 91       	ld	r23, X
    3616:	6d 93       	st	X+, r22
    3618:	70 83       	st	Z, r23
    361a:	62 91       	ld	r22, -Z
    361c:	ae 17       	cp	r26, r30
    361e:	bf 07       	cpc	r27, r31
    3620:	c8 f3       	brcs	.-14     	; 0x3614 <strrev+0x10>
    3622:	08 95       	ret

00003624 <__udivmodhi4>:
    3624:	aa 1b       	sub	r26, r26
    3626:	bb 1b       	sub	r27, r27
    3628:	51 e1       	ldi	r21, 0x11	; 17
    362a:	07 c0       	rjmp	.+14     	; 0x363a <__udivmodhi4_ep>

0000362c <__udivmodhi4_loop>:
    362c:	aa 1f       	adc	r26, r26
    362e:	bb 1f       	adc	r27, r27
    3630:	a6 17       	cp	r26, r22
    3632:	b7 07       	cpc	r27, r23
    3634:	10 f0       	brcs	.+4      	; 0x363a <__udivmodhi4_ep>
    3636:	a6 1b       	sub	r26, r22
    3638:	b7 0b       	sbc	r27, r23

0000363a <__udivmodhi4_ep>:
    363a:	88 1f       	adc	r24, r24
    363c:	99 1f       	adc	r25, r25
    363e:	5a 95       	dec	r21
    3640:	a9 f7       	brne	.-22     	; 0x362c <__udivmodhi4_loop>
    3642:	80 95       	com	r24
    3644:	90 95       	com	r25
    3646:	bc 01       	movw	r22, r24
    3648:	cd 01       	movw	r24, r26
    364a:	08 95       	ret

0000364c <_exit>:
    364c:	f8 94       	cli

0000364e <__stop_program>:
    364e:	ff cf       	rjmp	.-2      	; 0x364e <__stop_program>
